// @ts-nocheck
(function() {
    if(typeof window.jQuery === "undefined"){
        (function(d) {
            let s = d.createElement('script');s.async = true;
            s.src = 'https://code.jquery.com/jquery-3.6.0.min.js';
            (d.head || d.body).appendChild(s);
        })(document);
    }
     if(typeof window.platform === "undefined"){
        (function(d) {
            let s = d.createElement('script');s.async = true;
            s.src = 'https://cdnjs.cloudflare.com/ajax/libs/platform/1.3.6/platform.min.js';
            (d.head || d.body).appendChild(s);
        })(document);
     }
    if(typeof window.Snap === "undefined"){
        (function(d) {
            let s = d.createElement('script');s.async = true;
            s.src = 'https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.5.1/snap.svg-min.js';
            (d.head || d.body).appendChild(s);
        })(document);
     }
     if(typeof window.html2canvas === "undefined"){
        (function(d) {
            let s = d.createElement('script');s.async = true;
            s.src = 'https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.3.3/html2canvas.min.js';
            (d.head || d.body).appendChild(s);
        })(document);
     }

    console.log('GigaTester: dependency loading');
function gigatester(){
if(typeof window.jQuery === "undefined" || typeof window.html2canvas === "undefined"  || typeof window.platform === "undefined" ||  typeof window.Snap === "undefined"){
    console.log('GigaTester: inside giga timeout')
}
else{
    try{
    let JQ = jQuery.noConflict(true);
    (function($) {
        "use strict";
        console.log('GigaTester: inside main function');
        if (typeof window.GigaTester === "undefined") {
            window.GigaTester = {}
        }
        window.GigaTester.hide = function(){
            $(document.getElementById("gigatester_button_container")).css('display', 'none')
        }
        let mySrcUrl = '';
        let sc = document.getElementsByTagName("script");
        for(let i = 0; i < sc.length; i+=1)
        {
          let s = sc.item(i);        
          if(s.src && s.src.match(/gigatester_script\.js$/)) {
            mySrcUrl = s.src.substring(0, s.src.indexOf('gigatester_script'));
          }
        }
        console.log('my source url =', mySrcUrl);
        if(mySrcUrl === '') {
            console.log("Error: GigaTester: could not locate the source URL.")
        }
        const Lang = {
            language: "en",
            en: {
                draw_on_the_screen: "Draw on screen",
                draw_on_the_screen_help: "Give feedback with a screenshot",
                capture_screen_recorder: "Screen Recorder",
                capture_audio: "Capture audio",
                capture_video_help: "Give feedback with a screen recording",
                stop_video_recording: " Stop Video Recording ",
                general_feedback: "Submit general feedback",
                general_feedback_help: "Tell us what you liked and what not.",
                report_bug: "Submit a bug/issue",
                report_bug_help: "Tell us what failed.",
                your_email_address: "Your email",
                select_a_category: "Select a category *",
                select_a_reason: "Select a reason *",
                select_a_severity: "Choose severity *",
                leave_us_your_comment: "Provide your comments *",
                attach_a_screenshot: "Screenshot",
                screenshot_attached: "Screenshot",
                send: "Send feedback",
                back: "Back",
                remove: "Remove",
                close: "Close",
                next: "Next",
                capture: "Capture",
                send_success: "Thanks for your valuable feedback!",
                highlight: "Highlight",
                rectangle: "Draw Rectangle",
                blackout: "Blackout",
                pencil: "Pencil",
                line: "Draw Line",
                arrow: "Draw Arrow",
                add_a_comment: "Add a comment",
                capture_screenshot: "Capture screenshot",
                save: "Save",
                delete: "Delete",
                add_your_comment_here: "Enter your comment...",
                attach_a_file: "Attach a file",
                file_format_not_supported: "File format not supported",
                max: "Maximum",
                open_feedback: "Feedback",
                search: "Search...",
                cancel: "Cancel",
        //        feedback_not_found: "Oops, no feedback could be found.",
                feedback_type_all: "All",
                feedback_type_general: "General",
                feedback_type_screenshot: "Screenshot",
                feedback_type_video: "Video",
                this_page_only: "This page only",
                want_to_leave: "You have unsaved changes",
                changes_not_saved: "Are you sure that you want to close?",
                discard: "Discard",
                start_recording: "Start recording",
                screen_recording: "Screen recording",
                recording_mute: "Turn off microphone",
                recording_unmute: "Turn on microphone",
                recording_pause: "Pause",
                recording_resume: "Resume",
                recording_draw: "Draw",
                recording_finish: "Finish recording",
                video_not_supported: "Video recording is not supported",
                video_requires_https: "A secure HTTPS connection is required for video recording.",
                ok: "OK"            
            },
            setLang: function(language) {
                this.language = language
            },
            get: function(key, include_fallback) {
                if (!Lang[Lang.language]) {
                    Lang.language = "en"
                }
                if (Lang[Lang.language][key]) {
                    return Lang[Lang.language][key]
                } else {
                    if (include_fallback) {
                        return Lang["en"][key] || ""
                    } else {
                        return ""
                    }
                }
            }
        };
        const Svg_Icons = {
            feedback_screenshot: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 122.88 117.52" style="enable-background:new 0 0 122.88 117.52" xml:space="preserve"><g><path d="M74.01,0v11.98H19.13c-3.93,0.01-7.14,3.22-7.15,7.15v17.74H0V19.13c0-1.07,0.09-2.09,0.26-3.14 c0.91-5.37,3.99-10,8.56-12.96c3.13-2,6.6-3.01,10.31-3.03H74.01L74.01,0z M106.86,101.52v16H94.87v-16H79.6V89.53h15.27V69.72 h11.98v19.81h16.03v11.98H106.86L106.86,101.52z M0,48.85h11.98v33.53c0.01,2.69,1.52,5.12,3.9,6.36L10.4,99.4 c-3.97-2.06-7.06-5.36-8.84-9.46C0.52,87.51,0.01,85.02,0,82.39V48.85L0,48.85z M24.89,101.52V89.53h42.73v11.98H24.89 L24.89,101.52z M106.85,57.74H94.87V19.13c-0.01-3.93-3.22-7.14-7.15-7.15h-1.73V0h1.73c1.07,0,2.09,0.09,3.14,0.26 c5.37,0.91,10,3.99,12.96,8.56c2,3.13,3.01,6.6,3.03,10.31V57.74L106.85,57.74z"/></g></svg>',
            feedback_video: '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 118.38 122.88"><defs><style>.cls-1{fill:#d8453e;fill-rule:evenodd;}</style></defs><title>screen-recorder</title><path d="M118.38,77v41.87a4,4,0,0,1-4,4H74.5v-9.27h34.63V77ZM81.53,90.36l5,1.49a9.13,9.13,0,0,1-1.57,3.49,6.88,6.88,0,0,1-2.67,2.11,10,10,0,0,1-4,.71,11.76,11.76,0,0,1-4.88-.86,7.78,7.78,0,0,1-3.27-3.06,10.28,10.28,0,0,1-1.38-5.58q0-4.55,2.41-7a9.26,9.26,0,0,1,6.85-2.44,9.25,9.25,0,0,1,5.44,1.41,8.17,8.17,0,0,1,2.94,4.3l-5,1.1a4.43,4.43,0,0,0-.55-1.22,3.21,3.21,0,0,0-2.71-1.34,3.36,3.36,0,0,0-3,1.54,6.7,6.7,0,0,0-.78,3.6q0,3,.93,4.17a3.63,3.63,0,0,0,5,.21,5.42,5.42,0,0,0,1.23-2.64ZM51.27,79.54H66.41v3.91H57v2.91h8.77V90.1H57v3.6H66.7v4.14H51.27V79.54ZM31.88,97.86V79.54h9.43a13.79,13.79,0,0,1,4,.45,4.3,4.3,0,0,1,2.23,1.66,5.06,5.06,0,0,1,.85,3,5.18,5.18,0,0,1-.65,2.63A4.85,4.85,0,0,1,46,89.05a6.82,6.82,0,0,1-2,.72,6,6,0,0,1,1.48.67,6.57,6.57,0,0,1,.9,1,7,7,0,0,1,.79,1.14l2.75,5.28H43.51l-3-5.58a4.33,4.33,0,0,0-1-1.41,2.43,2.43,0,0,0-1.39-.43h-.5v7.42l-5.69,0ZM37.57,87H40a9.36,9.36,0,0,0,1.5-.25,1.49,1.49,0,0,0,.91-.58,1.86,1.86,0,0,0-.2-2.43,3.48,3.48,0,0,0-2.11-.47H37.58V87Zm37-77.8V0h39.86a4,4,0,0,1,4,4V45.9H109.1V9.18ZM9.28,45.84H0V4A4,4,0,0,1,4,0h39.5V9.29H9.28V45.84Zm34.14,67.79v9.25H4a4,4,0,0,1-4-4V77H9.28v36.66H43.42Z"/><path class="cls-1" d="M81.78,46.69c0,11.77-10.82,22.58-22.59,22.58S36.6,58.46,36.6,46.69c0-14.6,11.23-21.93,22.48-22s22.7,7.28,22.7,22ZM59.19,35.46A11.23,11.23,0,1,1,48,46.69,11.22,11.22,0,0,1,59.19,35.46Z"/></svg>',
            feedback_bug: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 116.96 122.88" style="enable-background:new 0 0 116.96 122.88" xml:space="preserve"><style type="text/css">.st0{fill-rule:evenodd;clip-rule:evenodd;}</style><g><path class="st0" d="M91.53,67.05c0.03,0.85,0.05,1.71,0.05,2.58c0,2.38-0.12,4.71-0.37,6.99l14.92,7.57 c1.58,0.8,2.62,2.26,2.93,3.88l6.36,28.08c0.67,2.97-1.2,5.92-4.17,6.59c-2.97,0.67-5.92-1.2-6.59-4.17l-5.82-25.7l-9.88-5.01 c-4.98,16.53-16.52,28.11-29.96,28.11c-13.52,0-25.11-11.72-30.04-28.41l-10.8,4.9l-4.95,25.94c-0.57,3-3.47,4.96-6.46,4.39 c-3-0.57-4.96-3.47-4.39-6.46l5.47-28.64c0.3-1.75,1.44-3.32,3.17-4.1l15.77-7.16c-0.23-2.24-0.35-4.53-0.35-6.79v-0.01 c0-0.87,0.02-1.74,0.05-2.61L9.83,61.27c-1.74-0.6-2.99-1.99-3.48-3.64l-0.02,0l-6.1-20.21c-0.87-2.92,0.79-6,3.72-6.87 c2.92-0.87,6,0.79,6.87,3.72l5.28,17.5l13.33,4.6l59.22,0l12.21-4.21l5.28-17.5c0.87-2.92,3.95-4.59,6.87-3.72 c2.92,0.87,4.59,3.95,3.72,6.87l-6.1,20.21l-0.02,0c-0.49,1.64-1.74,3.03-3.48,3.63L91.53,67.05L91.53,67.05L91.53,67.05z M58.66,25.55c2.07,0,4.09,0.39,6.03,1.11c0.71-1.57,1.35-3.04,1.94-4.38C72.81,8.23,73.61,6.4,94.9,0.15 c1.99-0.58,4.08,0.56,4.67,2.55c0.59,1.99-0.56,4.08-2.55,4.67c-17.93,5.26-18.57,6.72-23.5,17.95c-0.69,1.56-1.45,3.29-2.35,5.27 c5.61,4.84,10.02,12.84,12.28,22.51l-49.58,0c2.27-9.67,6.67-17.67,12.28-22.51c-0.91-1.98-1.67-3.71-2.35-5.27 c-4.93-11.23-5.58-12.69-23.5-17.95c-1.99-0.58-3.13-2.68-2.55-4.67c0.59-1.99,2.67-3.13,4.67-2.55C43.7,6.4,44.5,8.23,50.68,22.28 c0.59,1.34,1.24,2.81,1.95,4.38C54.56,25.94,56.58,25.55,58.66,25.55L58.66,25.55L58.66,25.55z M67.99,36.6 c2.77,0,5.02,2.25,5.02,5.02c0,2.77-2.25,5.02-5.02,5.02c-2.77,0-5.02-2.25-5.02-5.02C62.97,38.85,65.22,36.6,67.99,36.6 L67.99,36.6z M49.32,36.6c2.77,0,5.02,2.25,5.02,5.02c0,2.77-2.25,5.02-5.02,5.02s-5.02-2.25-5.02-5.02 C44.3,38.85,46.55,36.6,49.32,36.6L49.32,36.6z"/></g></svg>',
            feedback_general: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 112.77 122.88" style="enable-background:new 0 0 112.77 122.88" xml:space="preserve"><g><path d="M64.44,61.11c1.79,0,3.12-1.45,3.12-3.12c0-1.78-1.45-3.12-3.12-3.12H24.75c-1.78,0-3.12,1.45-3.12,3.12 c0,1.78,1.45,3.12,3.12,3.12H64.44L64.44,61.11L64.44,61.11L64.44,61.11z M77.45,19.73l18.1-19.14c0.69-0.58,1.39-0.81,2.2-0.35 l14.56,14.1c0.58,0.69,0.69,1.5-0.12,2.31L93.75,36.14L77.45,19.73L77.45,19.73L77.45,19.73L77.45,19.73z M87.74,42.27l-18.66,3.86 l2.36-20.28L87.74,42.27L87.74,42.27z M19.14,13.09h41.73l-3.05,6.45H19.14c-3.48,0-6.65,1.43-8.96,3.73s-3.73,5.46-3.73,8.96 v45.74c0,3.48,1.43,6.66,3.73,8.96c2.3,2.3,5.47,3.73,8.96,3.73h3.72v0.01l0.21,0.01c1.77,0.12,3.12,1.66,2.99,3.43l-1.26,18.1 L48.78,97.7c0.58-0.58,1.38-0.93,2.27-0.93h37.32c3.48,0,6.65-1.42,8.96-3.73c2.3-2.3,3.73-5.48,3.73-8.96V50.45h6.68v42.69 c0.35,9.63-3.58,15.04-19.43,15.7l-32.25-0.74l-32.73,13.87l-0.16,0.13c-1.35,1.16-3.38,1-4.54-0.36c-0.57-0.67-0.82-1.49-0.77-2.3 l1.55-22.34h-0.26c-5.26,0-10.05-2.15-13.52-5.62C2.15,88.03,0,83.24,0,77.98V32.23c0-5.26,2.15-10.05,5.62-13.52 C9.08,15.24,13.87,13.09,19.14,13.09L19.14,13.09L19.14,13.09z M79.69,78.42c1.79,0,3.12-1.45,3.12-3.12 c0-1.79-1.45-3.12-3.12-3.12H24.75c-1.78,0-3.12,1.45-3.12,3.12c0,1.78,1.45,3.12,3.12,3.12H79.69L79.69,78.42L79.69,78.42 L79.69,78.42z M50.39,43.81c1.78,0,3.12-1.45,3.12-3.12c0-1.67-1.45-3.12-3.12-3.12H24.75c-1.78,0-3.12,1.45-3.12,3.12 c0,1.78,1.45,3.12,3.12,3.12H50.39L50.39,43.81L50.39,43.81L50.39,43.81z"/></g></svg>',
            click: '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 102.53 122.88"><title>mouse-cursor</title><path d="M76.7,122.45a4.62,4.62,0,0,1-3.11.28,4.34,4.34,0,0,1-2.66-2L59.78,101.51l-10.61,11.9A13.37,13.37,0,0,1,44.4,117a6.27,6.27,0,0,1-3.63.42,4.82,4.82,0,0,1-3.14-2.26,8.74,8.74,0,0,1-1.18-4l-5.91-77a1.09,1.09,0,0,1,0-.18,3.22,3.22,0,0,1,1.3-2.65,1.85,1.85,0,0,1,.63-.31,3.09,3.09,0,0,1,1.34-.15,3.34,3.34,0,0,1,1.23.39,1.76,1.76,0,0,1,.37.23L99,75a8.86,8.86,0,0,1,2.91,3,4.79,4.79,0,0,1,.38,3.85,6.29,6.29,0,0,1-2.18,2.93,13.34,13.34,0,0,1-5.47,2.35l-.07,0L79,90.38,90.1,109.66a4.32,4.32,0,0,1,.41,3.29,4.66,4.66,0,0,1-1.94,2.67l-.13.07-11.5,6.64a.9.9,0,0,1-.24.12Zm-2.08-3.62a.62.62,0,0,0,.33,0,.34.34,0,0,1,.12-.06l11.35-6.55a.58.58,0,0,0,.2-.31.35.35,0,0,0,0-.25l-13-22.22h0a2.05,2.05,0,0,1-.22-.6A2,2,0,0,1,75,86.46l18.26-3.24h.07a9.41,9.41,0,0,0,3.8-1.58,2.36,2.36,0,0,0,.83-1,.91.91,0,0,0-.11-.73,5,5,0,0,0-1.61-1.58l-61-41.92L41,110a4.86,4.86,0,0,0,.57,2.19.89.89,0,0,0,.57.45,2.22,2.22,0,0,0,1.29-.21,9.16,9.16,0,0,0,3.26-2.5l11.37-13.7h0a2.19,2.19,0,0,1,.5-.41,2,2,0,0,1,2.75.74l13.09,22.16a.34.34,0,0,0,.21.12Zm.44-.06a2,2,0,0,1,.88-.21l-.88.21ZM29.52,15.37a14.11,14.11,0,0,1,10,4.14c.27.27.52.54.76.82l-.41-.13a15.23,15.23,0,0,0-2.35-.54c-.26-.05-.53-.09-.79-.12a16.41,16.41,0,0,0-3.64,0l-.51.07a10.42,10.42,0,0,0-10.41,2.57h0a10.33,10.33,0,0,0-3,7.34,10.43,10.43,0,0,1-.18,3,16,16,0,0,0-.27,2.56,12.31,12.31,0,0,0,0,1.92l.14,1.78a14.16,14.16,0,0,1,.67-19.29h0a14.1,14.1,0,0,1,10-4.14ZM29.52,0A29.53,29.53,0,0,1,59.05,29.52c0,1,0,1.92-.14,2.86l-4.34-3A25,25,0,1,0,19.9,52.66l.38,4.91A29.53,29.53,0,0,1,29.52,0Z"/></svg>',
            arrow_to_left: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="94.051px" height="122.879px" viewBox="0 0 94.051 122.879" enable-background="new 0 0 94.051 122.879" xml:space="preserve"><g><path d="M92.125,110.623c2.619,2.692,2.561,6.995-0.135,9.618c-2.689,2.618-6.994,2.558-9.611-0.137L29.865,65.95l4.875-4.737 l-4.895,4.747c-2.623-2.705-2.56-7.024,0.146-9.644c0.081-0.076,0.159-0.148,0.239-0.22L82.377,2.774 c2.619-2.694,6.924-2.755,9.613-0.137c2.695,2.623,2.754,6.925,0.135,9.618L44.229,61.232L92.125,110.623L92.125,110.623 L92.125,110.623z M12.651,6.325C12.651,2.832,9.819,0,6.325,0C2.833,0,0,2.832,0,6.325v110.229c0,3.493,2.833,6.325,6.325,6.325 c3.494,0,6.326-2.832,6.326-6.325V6.325L12.651,6.325z"/></g></svg>',
            arrow_to_right: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="94.051px" height="122.879px" viewBox="0 0 94.051 122.879" enable-background="new 0 0 94.051 122.879" xml:space="preserve"><g><path d="M1.926,110.623c-2.618,2.692-2.56,6.995,0.134,9.618c2.69,2.618,6.995,2.558,9.613-0.137L64.186,65.95l-4.875-4.737 l4.896,4.747c2.623-2.705,2.56-7.024-0.146-9.644c-0.081-0.076-0.159-0.148-0.24-0.22L11.674,2.774 C9.056,0.081,4.75,0.02,2.06,2.637c-2.693,2.623-2.752,6.925-0.134,9.618l47.896,48.978L1.926,110.623L1.926,110.623L1.926,110.623 z M81.401,6.325C81.401,2.832,84.233,0,87.726,0s6.325,2.832,6.325,6.325v110.229c0,3.493-2.832,6.325-6.325,6.325 s-6.325-2.832-6.325-6.325V6.325L81.401,6.325z"/></g></svg>',
            mic: '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 82.05 122.88"><title>mic-microphone</title><path d="M59.89,20.83V52.3c0,27-37.73,27-37.73,0V20.83c0-27.77,37.73-27.77,37.73,0Zm-14.18,76V118.2a4.69,4.69,0,0,1-9.37,0V96.78a40.71,40.71,0,0,1-12.45-3.51A41.63,41.63,0,0,1,12.05,85L12,84.91A41.31,41.31,0,0,1,3.12,71.68,40.73,40.73,0,0,1,0,56a4.67,4.67,0,0,1,8-3.31l.1.1A4.68,4.68,0,0,1,9.37,56a31.27,31.27,0,0,0,2.4,12.06A32,32,0,0,0,29,85.28a31.41,31.41,0,0,0,24.13,0,31.89,31.89,0,0,0,10.29-6.9l.08-.07a32,32,0,0,0,6.82-10.22A31.27,31.27,0,0,0,72.68,56a4.69,4.69,0,0,1,9.37,0,40.65,40.65,0,0,1-3.12,15.65A41.45,41.45,0,0,1,70,85l-.09.08a41.34,41.34,0,0,1-11.75,8.18,40.86,40.86,0,0,1-12.46,3.51Z"/></svg>',
            play: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 122.88 122.88" style="enable-background:new 0 0 122.88 122.88" xml:space="preserve"><style type="text/css">.st0{fill-rule:evenodd;clip-rule:evenodd;}</style><g><path class="st0" d="M61.44,0c33.93,0,61.44,27.51,61.44,61.44s-27.51,61.44-61.44,61.44S0,95.37,0,61.44S27.51,0,61.44,0L61.44,0z M83.31,65.24c3.13-2.02,3.12-4.27,0-6.06L50.98,40.6c-2.55-1.6-5.21-0.66-5.14,2.67l0.1,37.55c0.22,3.61,2.28,4.6,5.32,2.93 L83.31,65.24L83.31,65.24z M61.44,12.48c27.04,0,48.96,21.92,48.96,48.96c0,27.04-21.92,48.96-48.96,48.96S12.48,88.48,12.48,61.44 C12.48,34.4,34.4,12.48,61.44,12.48L61.44,12.48z"/></g></svg>',
            pause: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 122.88 122.88" style="enable-background:new 0 0 122.88 122.88" xml:space="preserve"><g><path d="M61.44,0c16.97,0,32.33,6.88,43.44,18c11.12,11.12,18,26.48,18,43.44c0,16.97-6.88,32.33-18,43.44 c-11.12,11.12-26.48,18-43.44,18c-16.97,0-32.33-6.88-43.44-18C6.88,93.77,0,78.41,0,61.44C0,44.47,6.88,29.11,18,18 C29.11,6.88,44.47,0,61.44,0L61.44,0z M42.3,39.47h13.59v43.95l-13.59,0V39.47L42.3,39.47L42.3,39.47z M66.99,39.47h13.59v43.95 l-13.59,0V39.47L66.99,39.47L66.99,39.47z M97.42,25.46c-9.21-9.21-21.93-14.9-35.98-14.9c-14.05,0-26.78,5.7-35.98,14.9 c-9.21,9.21-14.9,21.93-14.9,35.98s5.7,26.78,14.9,35.98c9.21,9.21,21.93,14.9,35.98,14.9c14.05,0,26.78-5.7,35.98-14.9 c9.21-9.21,14.9-21.93,14.9-35.98S106.63,34.66,97.42,25.46L97.42,25.46z"/></g></svg>',
            resume: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 122.88 118.66" style="enable-background:new 0 0 122.88 118.66" xml:space="preserve"><g><path d="M16.68,22.2c-1.78,2.21-3.43,4.55-5.06,7.46C5.63,40.31,3.1,52.39,4.13,64.2c1.01,11.54,5.43,22.83,13.37,32.27 c2.85,3.39,5.91,6.38,9.13,8.97c11.11,8.93,24.28,13.34,37.41,13.22c13.13-0.12,26.21-4.78,37.14-13.98 c3.19-2.68,6.18-5.73,8.91-9.13c6.4-7.96,10.51-17.29,12.07-27.14c1.53-9.67,0.59-19.83-3.07-29.66 c-3.49-9.35-8.82-17.68-15.78-24.21C96.7,8.33,88.59,3.76,79.2,1.48c-2.94-0.71-5.94-1.18-8.99-1.37c-3.06-0.2-6.19-0.13-9.4,0.22 c-2.01,0.22-3.46,2.03-3.24,4.04c0.22,2.01,2.03,3.46,4.04,3.24c2.78-0.31,5.49-0.37,8.14-0.19c2.65,0.17,5.23,0.57,7.73,1.17 c8.11,1.96,15.1,5.91,20.84,11.29c6.14,5.75,10.85,13.12,13.94,21.43c3.21,8.61,4.04,17.51,2.7,25.96 C113.59,75.85,110,84,104.4,90.96c-2.47,3.07-5.12,5.78-7.91,8.13c-9.59,8.07-21.03,12.15-32.5,12.26 c-11.47,0.11-23-3.76-32.76-11.61c-2.9-2.33-5.62-4.98-8.13-7.97c-6.92-8.22-10.77-18.09-11.65-28.2 c-0.91-10.38,1.32-20.99,6.57-30.33c1.59-2.82,3.21-5.07,5.01-7.24l0.53,14.7c0.07,2.02,1.76,3.6,3.78,3.53 c2.02-0.07,3.6-1.76,3.53-3.78l-0.85-23.42c-0.07-2.02-1.76-3.59-3.78-3.52c-0.13,0.01-0.25,0.02-0.37,0.03v0l-22.7,3.19 c-2,0.28-3.4,2.12-3.12,4.13c0.28,2,2.12,3.4,4.13,3.12L16.68,22.2L16.68,22.2L16.68,22.2z M85.78,58.71L53.11,80.65V37.12 L85.78,58.71L85.78,58.71z"/></g></svg>',
            stop: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 493.56 493.56"><path d="M438.254,0H58.974C27.502,0,0.006,25.992,0.006,57.472v379.256c0,31.48,27.496,56.832,58.968,56.832h379.28 c31.468,0,55.3-25.352,55.3-56.832V57.472C493.554,25.992,469.722,0,438.254,0z"/></svg>',
            fullscreen: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 122.88 122.87" style="enable-background:new 0 0 122.88 122.87" xml:space="preserve"><g><path d="M122.88,77.63v41.12c0,2.28-1.85,4.12-4.12,4.12H77.33v-9.62h35.95c0-12.34,0-23.27,0-35.62H122.88L122.88,77.63z M77.39,9.53V0h41.37c2.28,0,4.12,1.85,4.12,4.12v41.18h-9.63V9.53H77.39L77.39,9.53z M9.63,45.24H0V4.12C0,1.85,1.85,0,4.12,0h41 v9.64H9.63V45.24L9.63,45.24z M45.07,113.27v9.6H4.12c-2.28,0-4.12-1.85-4.12-4.13V77.57h9.63v35.71H45.07L45.07,113.27z"/></g></svg>',
            blackout: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 493.56 493.56"><path d="M438.254,0H58.974C27.502,0,0.006,25.992,0.006,57.472v379.256c0,31.48,27.496,56.832,58.968,56.832h379.28 c31.468,0,55.3-25.352,55.3-56.832V57.472C493.554,25.992,469.722,0,438.254,0z"/></svg>',
            square: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="122.661px" height="122.88px" viewBox="0 0 122.661 122.88" enable-background="new 0 0 122.661 122.88" xml:space="preserve"><g><path fill-rule="evenodd" clip-rule="evenodd" d="M21.26,0h80.142c11.692,0,21.26,9.706,21.26,21.569v79.741 c0,11.864-9.567,21.569-21.26,21.569H21.26C9.566,122.88,0,113.175,0,101.311V21.569C0,9.706,9.566,0,21.26,0L21.26,0z M21.674,11.14h79.312c5.855,0,10.647,4.788,10.647,10.641v79.313c0,5.855-4.792,10.646-10.647,10.646H21.674 c-5.855,0-10.646-4.79-10.646-10.646V21.78C11.027,15.928,15.818,11.14,21.674,11.14L21.674,11.14z"/></g></svg>',
            line: '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 122.88 23.69"><defs><style>.cls-1{fill-rule:evenodd;}</style></defs><title>horizontal-line</title><path class="cls-1" d="M1.51,0H121.37a1.52,1.52,0,0,1,1.51,1.51V22.18a1.52,1.52,0,0,1-1.51,1.51H1.51A1.52,1.52,0,0,1,0,22.18V1.51A1.52,1.52,0,0,1,1.51,0Z"/></svg>',
            arrow: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 94.85 122.88" style="enable-background:new 0 0 94.85 122.88" xml:space="preserve"><g><path d="M60.56,122.49c-1.63,0.83-3.68,0.29-4.56-1.22L38.48,91.1l-17.38,19.51c-5.24,5.88-12.16,7.34-12.85-1.57L0,1.59h0 C-0.04,1.03,0.2,0.46,0.65,0.13C1.17-0.1,1.78-0.02,2.24,0.3l0,0l88.92,60.87c7.37,5.05,2.65,10.31-5.06,11.91l-25.58,5.3 l17.37,30.26c0.86,1.51,0.31,3.56-1.22,4.55L60.56,122.49L60.56,122.49L60.56,122.49z"/></g></svg>',
            text: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 110.36 122.88" style="enable-background:new 0 0 110.36 122.88" xml:space="preserve"><style type="text/css">.st0{fill-rule:evenodd;clip-rule:evenodd;}</style><g><path class="st0" d="M110.36,0v33.28h-3.25c-1.95-7.7-4.08-13.21-6.43-16.55c-2.35-3.37-5.6-6.03-9.71-8.01 c-2.29-1.12-6.31-1.64-12.03-1.64l-9.15,0v94.76c0,6.28,0.34,10.21,1.02,11.79c0.71,1.57,2.07,2.94,4.08,4.12 c2.04,1.2,4.79,1.79,8.29,1.79h4.08v3.34H22.92v-3.34H27c3.56,0,6.43-0.65,8.6-1.92c1.58-0.84,2.82-2.29,3.71-4.36 c0.68-1.42,1.02-5.23,1.02-11.41l0-94.76h-8.91c-8.26,0-14.29,1.73-18.03,5.26c-5.26,4.89-8.57,11.87-9.96,20.94l-3.43,0V0H110.36 L110.36,0z"/></g></svg>',
            highlighter: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 122.88 112.52" style="enable-background:new 0 0 122.88 112.52" xml:space="preserve"><g><path d="M30.36,55.98l35.29,35.29c0.47,0.4,1.07,0.62,1.65,0.62c0.51,0,0.99-0.16,1.34-0.51l0.09-0.09l48.08-56.25 c0.5-0.58,0.77-1.29,0.77-1.97c0-0.56-0.2-1.12-0.63-1.55L91.34,5.91c-0.42-0.42-0.95-0.61-1.5-0.61c-0.71,0-1.44,0.28-2.07,0.79 L30.15,52.8l-0.11,0.11c-0.32,0.32-0.46,0.77-0.46,1.25c0,0.58,0.21,1.17,0.59,1.64L30.36,55.98L30.36,55.98z M97.16,37.82 c1.03-1.03,2.71-1.03,3.75,0c1.03,1.03,1.03,2.71,0,3.75L75.39,67.08c-1.03,1.03-2.71,1.03-3.75,0c-1.03-1.03-1.03-2.71,0-3.75 L97.16,37.82L97.16,37.82z M81.82,22.49c1.03-1.03,2.71-1.03,3.75,0c1.03,1.03,1.03,2.71,0,3.75L60.06,51.75 c-1.03,1.03-2.71,1.03-3.75,0c-1.03-1.03-1.03-2.71,0-3.75L81.82,22.49L81.82,22.49z M30.64,105.8l-5.95,5.95 c-0.63,0.63-1.5,0.88-2.32,0.74l-20.01-2.21c-1.45-0.16-2.5-1.47-2.34-2.92c0.07-0.62,0.35-1.17,0.76-1.58l0,0l14.92-14.92 l-1.07-1.07c-1.03-1.03-1.03-2.71,0-3.75l4.69-4.69l0.01,0.01l0.07-0.07c0.19-0.18,0.37-0.39,0.54-0.62 c0.16-0.22,0.3-0.48,0.43-0.75c0.92-1.99,0.54-6.28,0.24-9.63l0.01,0c-0.09-0.96-0.16-1.85-0.2-2.46 c-0.56-4.42,2.26-6.98,5.09-9.51c-0.77-1.25-1.18-2.69-1.19-4.11c-0.02-1.84,0.62-3.67,1.99-5.04c0.13-0.13,0.3-0.28,0.52-0.46 L84.44,1.99C86.02,0.7,87.94,0,89.84,0c1.9,0,3.77,0.68,5.25,2.16l25.61,25.61c1.48,1.48,2.18,3.37,2.18,5.29 c0,1.91-0.71,3.85-2.05,5.41L72.75,94.73c-0.15,0.18-0.28,0.32-0.36,0.4c-1.4,1.4-3.26,2.06-5.13,2.04 c-1.41-0.01-2.84-0.41-4.07-1.17c-2.53,2.84-5.09,5.65-9.51,5.09c-0.91-0.05-1.66-0.12-2.46-0.19l0-0.01 c-3.35-0.3-7.63-0.68-9.63,0.25c-0.28,0.13-0.53,0.27-0.75,0.43c-0.18,0.13-0.36,0.28-0.53,0.45c-0.05,0.06-0.1,0.12-0.16,0.17 l-4.69,4.69c-1.03,1.03-2.71,1.03-3.75,0L30.64,105.8L30.64,105.8z M20.24,87.9l1.07,1.07l11.2,11.2l1.07,1.07l2.89-2.89 c0.4-0.41,0.83-0.78,1.29-1.11c0.51-0.36,1.05-0.67,1.6-0.93c3.26-1.51,8.33-1.06,12.3-0.7l0-0.01c0.98,0.09,1.89,0.17,2.4,0.2 l0.22,0.02c1.73,0.23,3.37-1.6,5-3.43L29.08,62.2c-1.83,1.63-3.67,3.28-3.42,5.01l0.02,0.21c0.05,0.86,0.12,1.61,0.19,2.4h0.01 c0.35,3.96,0.8,9.03-0.71,12.3c-0.26,0.55-0.56,1.09-0.93,1.6c-0.34,0.47-0.73,0.93-1.19,1.36l0.01,0.01L20.24,87.9L20.24,87.9z"/></g></svg>',
            camera: '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 122.88 80.82"><defs><style>.cls-1{fill-rule:evenodd;}</style></defs><title>video-recording</title><path class="cls-1" d="M98.64,45.6V15.16L122.88,0V61.17L98.64,45.6ZM9.48.38H85.82a9.51,9.51,0,0,1,9.49,9.48V51.09a9.52,9.52,0,0,1-9.49,9.48H56.13L68.75,80.82H57L43.23,62.31,29.33,80.82H17.4L30,60.57H9.48A9.51,9.51,0,0,1,0,51.09V9.86A9.51,9.51,0,0,1,9.48.38ZM76.63,31.62l3.92,1.17a7.34,7.34,0,0,1-1.24,2.75A5.33,5.33,0,0,1,77.2,37.2a7.88,7.88,0,0,1-3.19.57,9.21,9.21,0,0,1-3.85-.69,6.11,6.11,0,0,1-2.58-2.4,8.19,8.19,0,0,1-1.09-4.41,7.49,7.49,0,0,1,1.91-5.5,7.26,7.26,0,0,1,5.39-1.92A7.29,7.29,0,0,1,78.08,24a6.49,6.49,0,0,1,2.32,3.39l-3.93.87a3.22,3.22,0,0,0-.44-1,2.59,2.59,0,0,0-.92-.79,2.66,2.66,0,0,0-1.21-.27,2.63,2.63,0,0,0-2.33,1.22A5.21,5.21,0,0,0,71,30.24a5.36,5.36,0,0,0,.73,3.29,2.52,2.52,0,0,0,2,.89,2.49,2.49,0,0,0,1.94-.72,4.38,4.38,0,0,0,1-2.08ZM31.22,30.18a9.35,9.35,0,0,1-9,9,9.35,9.35,0,0,1-9-9c0-5.79,4.46-8.7,8.93-8.72s9,2.89,9,8.72Zm-9-4.45a4.46,4.46,0,1,1-4.45,4.45,4.46,4.46,0,0,1,4.45-4.45Zm30.53-2.64H64.72v3.08H57.26v2.3h6.91v2.94H57.26v2.84h7.68v3.27H52.78V23.09ZM37.5,37.53V23.09h7.43a11,11,0,0,1,3.16.35,3.39,3.39,0,0,1,1.76,1.31A4.39,4.39,0,0,1,50,29.17a3.89,3.89,0,0,1-1.4,1.42,5.75,5.75,0,0,1-1.57.56,4.77,4.77,0,0,1,1.16.53,5.09,5.09,0,0,1,.71.76,6.17,6.17,0,0,1,.62.9l2.17,4.17h-5l-2.38-4.4A3.44,3.44,0,0,0,43.47,32a1.84,1.84,0,0,0-1.1-.34H42v5.85l-4.48,0ZM42,29h1.89a6.94,6.94,0,0,0,1.18-.2,1.11,1.11,0,0,0,.72-.45,1.48,1.48,0,0,0-.16-1.92A2.73,2.73,0,0,0,44,26H42V29Z"/></svg>',
            search: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="122.879px" height="119.799px" viewBox="0 0 122.879 119.799" enable-background="new 0 0 122.879 119.799" xml:space="preserve"><g><path d="M49.988,0h0.016v0.007C63.803,0.011,76.298,5.608,85.34,14.652c9.027,9.031,14.619,21.515,14.628,35.303h0.007v0.033v0.04 h-0.007c-0.005,5.557-0.917,10.905-2.594,15.892c-0.281,0.837-0.575,1.641-0.877,2.409v0.007c-1.446,3.66-3.315,7.12-5.547,10.307 l29.082,26.139l0.018,0.016l0.157,0.146l0.011,0.011c1.642,1.563,2.536,3.656,2.649,5.78c0.11,2.1-0.543,4.248-1.979,5.971 l-0.011,0.016l-0.175,0.203l-0.035,0.035l-0.146,0.16l-0.016,0.021c-1.565,1.642-3.654,2.534-5.78,2.646 c-2.097,0.111-4.247-0.54-5.971-1.978l-0.015-0.011l-0.204-0.175l-0.029-0.024L78.761,90.865c-0.88,0.62-1.778,1.209-2.687,1.765 c-1.233,0.755-2.51,1.466-3.813,2.115c-6.699,3.342-14.269,5.222-22.272,5.222v0.007h-0.016v-0.007 c-13.799-0.004-26.296-5.601-35.338-14.645C5.605,76.291,0.016,63.805,0.007,50.021H0v-0.033v-0.016h0.007 c0.004-13.799,5.601-26.296,14.645-35.338C23.683,5.608,36.167,0.016,49.955,0.007V0H49.988L49.988,0z M50.004,11.21v0.007h-0.016 h-0.033V11.21c-10.686,0.007-20.372,4.35-27.384,11.359C15.56,29.578,11.213,39.274,11.21,49.973h0.007v0.016v0.033H11.21 c0.007,10.686,4.347,20.367,11.359,27.381c7.009,7.012,16.705,11.359,27.403,11.361v-0.007h0.016h0.033v0.007 c10.686-0.007,20.368-4.348,27.382-11.359c7.011-7.009,11.358-16.702,11.36-27.4h-0.006v-0.016v-0.033h0.006 c-0.006-10.686-4.35-20.372-11.358-27.384C70.396,15.56,60.703,11.213,50.004,11.21L50.004,11.21z"/></g></svg>',
            file_search: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="110.66px" height="122.879px" viewBox="0 0 110.66 122.879" enable-background="new 0 0 110.66 122.879" xml:space="preserve"><g><path d="M81.813,70.818c6.268,0,11.949,2.549,16.066,6.648c4.115,4.117,6.648,9.783,6.648,16.066c0,4.582-1.365,8.865-3.699,12.432 l9.832,10.715l-6.781,6.199l-9.484-10.432c-3.6,2.4-7.932,3.799-12.582,3.799c-6.266,0-11.949-2.549-16.064-6.648 c-4.117-4.117-6.65-9.783-6.65-16.064c0-6.268,2.551-11.949,6.65-16.066C69.863,73.35,75.531,70.818,81.813,70.818L81.813,70.818z M19.784,57.08c-1.445,0-2.649-1.308-2.649-2.89c0-1.617,1.169-2.89,2.649-2.89h22.639c1.445,0,2.649,1.308,2.649,2.89 c0,1.617-1.17,2.89-2.649,2.89H19.784L19.784,57.08z M84.879,17.582h9.496c1.859,0,3.58,0.757,4.783,1.995 c1.238,1.239,1.996,2.925,1.996,4.783v37.031c-0.203,2.121-5.41,2.148-5.85,0V24.359c0-0.275-0.104-0.516-0.275-0.688 c-0.172-0.172-0.412-0.275-0.688-0.275h-9.496v37.995c-0.506,1.924-4.838,2.213-5.814,0V6.778c0-0.275-0.104-0.516-0.275-0.688 c-0.172-0.172-0.414-0.275-0.689-0.275H6.744c-0.275,0-0.517,0.103-0.688,0.275C5.883,6.262,5.78,6.502,5.78,6.778v80.58 c0,0.275,0.103,0.516,0.275,0.688s0.413,0.275,0.688,0.275h42.53c2.929,0.301,3.017,5.365,0,5.814H22.054v10.803 c0,0.275,0.104,0.518,0.275,0.689s0.413,0.275,0.688,0.275h26.256c2.122,0.238,2.805,5.063,0,5.814H23.052 c-1.858,0-3.578-0.758-4.782-1.996c-1.239-1.238-1.996-2.924-1.996-4.783V94.135H6.778c-1.858,0-3.578-0.758-4.782-1.996 C0.757,90.9,0,89.215,0,87.357V6.778C0,4.92,0.757,3.2,1.996,1.995C3.234,0.757,4.92,0,6.778,0h71.324 c1.857,0,3.578,0.757,4.783,1.995c1.238,1.239,1.994,2.925,1.994,4.783V17.582L84.879,17.582L84.879,17.582z M19.749,26.045 c-1.445,0-2.649-1.308-2.649-2.891c0-1.617,1.17-2.89,2.649-2.89h45.278c1.445,0,2.648,1.308,2.648,2.89 c0,1.617-1.168,2.891-2.648,2.891H19.749L19.749,26.045z M19.749,41.563c-1.445,0-2.649-1.308-2.649-2.89 c0-1.617,1.17-2.89,2.649-2.89h45.278c1.445,0,2.648,1.307,2.648,2.89c0,1.617-1.168,2.89-2.648,2.89H19.749L19.749,41.563z M93.891,81.455c-3.09-3.09-7.365-5.008-12.078-5.008c-4.711,0-8.986,1.918-12.076,5.008s-5.01,7.365-5.01,12.078 c0,4.711,1.92,8.986,5.01,12.076s7.365,5.01,12.076,5.01c4.713,0,8.988-1.92,12.078-5.01s5.008-7.365,5.008-12.076 C98.898,88.82,96.98,84.545,93.891,81.455L93.891,81.455L93.891,81.455z"/></g></svg>',
            paperclip: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="122.877px" height="112.531px" viewBox="0 0 122.877 112.531" enable-background="new 0 0 122.877 112.531" xml:space="preserve"><g><path fill-rule="evenodd" clip-rule="evenodd" d="M8.872,8.869L8.872,8.869C-2.956,20.694-2.958,40.039,8.87,51.864L53.433,96.43 c4.873,0.274,7.517-1.769,7.055-7.055L16.287,45.172c-7.945-7.945-7.945-20.941,0-28.887l0,0 c7.943-7.942,20.943-7.945,28.889-0.002c21.27,21.27,42.542,42.543,63.807,63.81c5.035,5.032,5.318,13.691,0.279,18.73l0,0 c-5.035,5.036-13.656,4.721-18.693-0.315C74.424,82.364,58.402,66.342,42.256,50.197c-2.235-2.235-2.349-6.006-0.113-8.245l0,0 c2.234-2.236,6.009-2.12,8.245,0.113L79.092,70.77c5.201,0.411,7.434-2.138,7.182-7.181L57.569,34.884 c-6.188-6.188-16.308-6.188-22.492-0.002l0,0c-6.19,6.188-6.184,16.315-0.002,22.496l19.662,19.664l9.269,9.27l19.201,19.199 c8.977,8.978,24.23,9.54,33.207,0.56c8.982-8.981,8.422-24.23-0.559-33.21L87.387,44.392v0.002L51.862,8.869 C40.039-2.958,20.693-2.954,8.872,8.869L8.872,8.869z"/></g></svg>',
            tick: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="122.881px" height="89.842px" viewBox="0 0 122.881 89.842" enable-background="new 0 0 122.881 89.842" xml:space="preserve"><g><path d="M1.232,55.541c-1.533-1.388-1.652-3.756-0.265-5.289c1.388-1.534,3.756-1.652,5.29-0.265l34.053,30.878l76.099-79.699 c1.429-1.501,3.804-1.561,5.305-0.132c1.502,1.428,1.561,3.803,0.133,5.305L43.223,88.683l-0.005-0.005 c-1.396,1.468-3.716,1.563-5.227,0.196L1.232,55.541L1.232,55.541z"/></g></svg>',
            close: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="122.878px" height="122.88px" viewBox="0 0 122.878 122.88" enable-background="new 0 0 122.878 122.88" xml:space="preserve"><g><path d="M1.426,8.313c-1.901-1.901-1.901-4.984,0-6.886c1.901-1.902,4.984-1.902,6.886,0l53.127,53.127l53.127-53.127 c1.901-1.902,4.984-1.902,6.887,0c1.901,1.901,1.901,4.985,0,6.886L68.324,61.439l53.128,53.128c1.901,1.901,1.901,4.984,0,6.886 c-1.902,1.902-4.985,1.902-6.887,0L61.438,68.326L8.312,121.453c-1.901,1.902-4.984,1.902-6.886,0 c-1.901-1.901-1.901-4.984,0-6.886l53.127-53.128L1.426,8.313L1.426,8.313z"/></g></svg>',
            times: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="121.31px" height="122.876px" viewBox="0 0 121.31 122.876" enable-background="new 0 0 121.31 122.876" xml:space="preserve"><g><path fill-rule="evenodd" clip-rule="evenodd" d="M90.914,5.296c6.927-7.034,18.188-7.065,25.154-0.068 c6.961,6.995,6.991,18.369,0.068,25.397L85.743,61.452l30.425,30.855c6.866,6.978,6.773,18.28-0.208,25.247 c-6.983,6.964-18.21,6.946-25.074-0.031L60.669,86.881L30.395,117.58c-6.927,7.034-18.188,7.065-25.154,0.068 c-6.961-6.995-6.992-18.369-0.068-25.397l30.393-30.827L5.142,30.568c-6.867-6.978-6.773-18.28,0.208-25.247 c6.983-6.963,18.21-6.946,25.074,0.031l30.217,30.643L90.914,5.296L90.914,5.296z"/></g></svg>',
            check: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="122.877px" height="101.052px" viewBox="0 0 122.877 101.052" enable-background="new 0 0 122.877 101.052" xml:space="preserve"><g><path d="M4.43,63.63c-2.869-2.755-4.352-6.42-4.427-10.11c-0.074-3.689,1.261-7.412,4.015-10.281 c2.752-2.867,6.417-4.351,10.106-4.425c3.691-0.076,7.412,1.255,10.283,4.012l24.787,23.851L98.543,3.989l1.768,1.349l-1.77-1.355 c0.141-0.183,0.301-0.339,0.479-0.466c2.936-2.543,6.621-3.691,10.223-3.495V0.018l0.176,0.016c3.623,0.24,7.162,1.85,9.775,4.766 c2.658,2.965,3.863,6.731,3.662,10.412h0.004l-0.016,0.176c-0.236,3.558-1.791,7.035-4.609,9.632l-59.224,72.09l0.004,0.004 c-0.111,0.141-0.236,0.262-0.372,0.368c-2.773,2.435-6.275,3.629-9.757,3.569c-3.511-0.061-7.015-1.396-9.741-4.016L4.43,63.63 L4.43,63.63z"/></g></svg>',
            star: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 122.88 117.1"><path class="star" fill="#FFD401" d="M64.42,2,80.13,38.7,120,42.26a3.2,3.2,0,0,1,1.82,5.62h0L91.64,74.18l8.9,39A3.19,3.19,0,0,1,98.12,117a3.27,3.27,0,0,1-2.46-.46L61.41,96.1,27.07,116.64a3.18,3.18,0,0,1-4.38-1.09,3.14,3.14,0,0,1-.37-2.38h0l8.91-39L1.09,47.88a3.24,3.24,0,0,1-.32-4.52,3.32,3.32,0,0,1,2.29-1l39.72-3.56L58.49,2a3.24,3.24,0,0,1,5.93,0Z"/></svg>',
            trash: '<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 105.7 122.88"><title>trash-bin</title><path d="M30.46,14.57V5.22A5.18,5.18,0,0,1,32,1.55v0A5.19,5.19,0,0,1,35.68,0H70a5.22,5.22,0,0,1,3.67,1.53l0,0a5.22,5.22,0,0,1,1.53,3.67v9.35h27.08a3.36,3.36,0,0,1,3.38,3.37V29.58A3.38,3.38,0,0,1,102.32,33H98.51l-8.3,87.22a3,3,0,0,1-2.95,2.69H18.43a3,3,0,0,1-3-2.95L7.19,33H3.37A3.38,3.38,0,0,1,0,29.58V17.94a3.36,3.36,0,0,1,3.37-3.37Zm36.27,0V8.51H39v6.06ZM49.48,49.25a3.4,3.4,0,0,1,6.8,0v51.81a3.4,3.4,0,1,1-6.8,0V49.25ZM69.59,49a3.4,3.4,0,1,1,6.78.42L73,101.27a3.4,3.4,0,0,1-6.78-.43L69.59,49Zm-40.26.42A3.39,3.39,0,1,1,36.1,49l3.41,51.8a3.39,3.39,0,1,1-6.77.43L29.33,49.46ZM92.51,33.38H13.19l7.94,83.55H84.56l8-83.55Z"/></svg>',
            angle_down: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 122.88 66.91" style="enable-background:new 0 0 122.88 66.91" xml:space="preserve"><g><path d="M11.68,1.95C8.95-0.7,4.6-0.64,1.95,2.08c-2.65,2.72-2.59,7.08,0.13,9.73l54.79,53.13l4.8-4.93l-4.8,4.95 c2.74,2.65,7.1,2.58,9.75-0.15c0.08-0.08,0.15-0.16,0.22-0.24l53.95-52.76c2.73-2.65,2.79-7.01,0.14-9.73 c-2.65-2.72-7.01-2.79-9.73-0.13L61.65,50.41L11.68,1.95L11.68,1.95z"/></g></svg>',
            plus: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="122.875px" height="122.648px" viewBox="0 0 122.875 122.648" enable-background="new 0 0 122.875 122.648" xml:space="preserve"><g><path fill-rule="evenodd" clip-rule="evenodd" d="M108.993,47.079c7.683-0.059,13.898,6.12,13.882,13.805 c-0.018,7.683-6.26,13.959-13.942,14.019L75.24,75.138l-0.235,33.73c-0.063,7.619-6.338,13.789-14.014,13.78 c-7.678-0.01-13.848-6.197-13.785-13.818l0.233-33.497l-33.558,0.235C6.2,75.628-0.016,69.448,0,61.764 c0.018-7.683,6.261-13.959,13.943-14.018l33.692-0.236l0.236-33.73C47.935,6.161,54.209-0.009,61.885,0 c7.678,0.009,13.848,6.197,13.784,13.818l-0.233,33.497L108.993,47.079L108.993,47.079z"/></g></svg>',
            photo: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="122.88px" height="122.151px" viewBox="0 0 122.88 122.151" enable-background="new 0 0 122.88 122.151" xml:space="preserve"><g><path d="M8.676,0h105.529c2.405,0,4.557,0.984,6.124,2.552c1.567,1.567,2.551,3.754,2.551,6.124v104.8 c0,2.405-0.983,4.557-2.551,6.124c-1.568,1.567-3.755,2.552-6.124,2.552H8.676c-2.406,0-4.557-0.984-6.124-2.553 C0.984,118.032,0,115.845,0,113.476V8.675C0,6.27,0.984,4.119,2.552,2.552C4.12,0.984,6.307,0,8.676,0L8.676,0z M9.097,88.323 l35.411-33.9c1.421-1.313,3.645-1.167,4.921,0.255c0.037,0.036,0.037,0.073,0.073,0.073l31.459,37.218l4.812-29.6 c0.328-1.896,2.114-3.208,4.01-2.879c0.729,0.109,1.385,0.474,1.895,0.948l22.07,23.184V10.773c0-0.474-0.183-0.875-0.511-1.166 c-0.291-0.292-0.729-0.511-1.166-0.511H10.737c-0.474,0-0.875,0.182-1.166,0.511c-0.292,0.291-0.511,0.729-0.511,1.166v77.55H9.097 L9.097,88.323z M90.526,19.866c3.464,0,6.635,1.422,8.895,3.682c2.297,2.296,3.682,5.431,3.682,8.895 c0,3.463-1.421,6.634-3.682,8.894c-2.296,2.297-5.431,3.682-8.895,3.682c-3.462,0-6.634-1.421-8.894-3.682 c-2.297-2.296-3.682-5.431-3.682-8.894c0-3.463,1.421-6.634,3.682-8.895C83.929,21.251,87.064,19.866,90.526,19.866L90.526,19.866z"/></g></svg>',
        };
        let String_Validator = {
            validate: function(str, nl2br) {
                var text = String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
                if (nl2br) {
                    text = text.replace(/(?:\r\n|\r|\n)/g, "<br>")
                }
                return text
            },
        };
        let GigaTester_modal = {
            audio_file: "",
            video_file: "",
            image_file:"",
            external_file:"",
            screenshot_file:"",
            user_detail_callback: "",
            default_category_callback: "",
            default_category_value: "",
            static_css: mySrcUrl + "gigatester.css",
            canvas_mode: false,
            canvas_target: false,
            controls_step: 0,
            click_counter: 0,
            form_type: "FEEDBACK",
            timer: 180,
            session_data: {},
            user_detail: {},
            set_screen_default_category: true,
            configs: {
                has_video: true,
                categories:  ['Video', 'Screen', 'Audio', 'Images', 'Other'],
                severities: ['Critical', 'High', 'Medium', 'Low'],
                reasons: ['Video Error', 'Video Not Found'],
                language: 'en',
                display_powered_by: true,
                config_data: [],
                selected_category: [],
                rating_limit: 2,
                title: "GigaTester",
                screen_record_time: 120,
                main_button_text: "FEEDBACK",
                main_button_text_colour: "#FFFFFF",
                main_button_background_colour: "#042e5b",
                workflow_type: 'BUGS,FEEDBACK',
                routing_item_order: 'BUGS,FEEDBACK',
                audio_time: 10,
                feedback_default_category: "",
                bugs_default_category:"",
                max_file_size: 20,
            },
            form_settings_default: {
                BUGS: {
                    allow_screenshot: true,
                    allow_audio: true,
                    allow_video: true,
                    allow_attachment: true,
                    rating_type: "",
                    rating_title_message: "",
                    bug_title_message: "",
                    rating_mandatory: false,
                    send_button_text: "",
                    name_field: false,
                    name_field_mandatory: false,
                    email_field: true,
                    email_field_mandatory: false,
                    title_field: false,
                    title_field_mandatory: false,
                    title_field_placeholder: "",
                    comment_field: true,
                    comment_field_mandatory: true,
                    comment_field_placeholder: "",
                    display_category: true,
                    display_reason: true,
                    display_severity: true,
                    display_assignee: false,
                    category_field_mandatory: true,
                    reason_field_mandatory: true,
                    severity_field_mandatory: true,
                    completed_dialog_icon_colour: "#2878F0",
                    completed_dialog_icon: 0,
                    completed_dialog_headline: "Thank you!",
                    completed_dialog_paragraph: "We really appreciate your feedback."
                },
                FEEDBACK: {
                    allow_screenshot: true,
                    allow_audio: true,
                    allow_video: true,
                    allow_attachment: true,
                    rating_type: "STAR",
                    rating_title_message: "Provide your rating",
                    rating_mandatory: true,
                    send_button_text: "",
                    name_field: false,
                    name_field_mandatory: false,
                    email_field: true,
                    email_field_mandatory: false,
                    title_field: false,
                    title_field_mandatory: false,
                    title_field_placeholder: "",
                    comment_field: true,
                    comment_field_mandatory: true,
                    comment_field_placeholder: "",
                    display_category: true,
                    display_reason: true,
                    display_severity: false,
                    display_assignee: false,
                    category_field_mandatory: true,
                    reason_field_mandatory: true,
                    severity_field_mandatory: false,
                    completed_dialog_icon_colour: "#2878F0",
                    completed_dialog_icon: 0,
                    completed_dialog_headline: "Thank you!",
                    completed_dialog_paragraph: "We really appreciate your feedback."
                }
            },
                custom_ui: {
                    element: null,
                    button: null,
                    overlay: null,
                    events: null,
                    feedback_view: null
                },
                overlay_hint_tooltip_added: false,
                email: "",
                categories: "",
                custom_data: {},
                screenshot_data_uri: [],
                video_blob: null,
                video_url: "",
                recording: false,
                video_annotation: [],
                form_data: {
                    rating: 0,
                    name: "",
                    email: "",
                    title: "",
                    description: "",
                    category: "",
                    severity: "",
                    assignee: ""
                },
                comments: [],
                init: function() {
                    this.configs.form_settings = this.form_settings_default;
                    this.loadApi()
                },
                loadApi: function() {
                    console.log('GigaTester: load configs')
                    GigaTester_Api.isLoaded();
                    this.checkSessionStorage();
                    this.addCSS(function() {});
                },
                addCSS: function(callback) {
                    let parent_node = document.head || document.body;
                    $("<link>").attr({
                        rel: "stylesheet",
                        class: "gigatester-css",
                        href: this.static_css
                    }).appendTo($(parent_node));
                    let self = this;
                    let _interval_id = setInterval(function() {
                        let detector = $("<div>").addClass("gigatester-load-detector").appendTo($(document.body));
                        if (detector.css("z-index") == 1999) {
                            callback.call(self);
                            clearInterval(_interval_id)
                        }
                        detector.remove()
                    }, 10);
                    let branding_css = ":root {" + "--widget-button-bg: " + this.configs.main_button_background_colour + " !important;" + "--widget-button-text: " + this.configs.main_button_text_colour + " !important;" + "}";
                    $("<style>").html(branding_css).appendTo($(document.body))
                },
                addFeedbackButton: function() {
                    if (this.custom_ui.button) {
                        return
                    }
                    const root = $(document.getElementById('root'));
                    if(root){
                    root.attr({"data-html2canvas-ignore": "true"})
                    }
                    this.custom_ui.element = $("<gtdiv>").addClass("gigatester-button-container").attr({
                        id: "gigatester_button_container",
                        // "data-html2canvas-ignore": "true"
                    }).appendTo($(document.body));
                    this.configs.position = 'e'
                    this.custom_ui.button = $("<gtdiv>").addClass("gigatester-button gigatester-button-" + this.configs.position);
                    this.custom_ui.element.attr("modal", "true")
                    this.custom_ui.button.text(this.configs.main_button_text)
                    this.custom_ui.button.appendTo(this.custom_ui.element);
                    this.custom_ui.button.on("click", this.openControls.bind(this));
                    if ( this.configs.style === "text" && (this.configs.position === "e" || this.configs.position === "w")) {
                        if (navigator.userAgent.indexOf("Chrome") || navigator.userAgent.indexOf("chrome")) {
                            let button_width = this.custom_ui.button.outerWidth();
                            if (button_width % 2 === 1) {
                                button_width++
                            }
                            this.custom_ui.button.css("min-width", button_width)
                        }
                    }
                    this.custom_ui.button.on("click mouseup mousedown", function(e) {
                        // console.log(e,'mouse event')
                        e.stopPropagation()
                    });
                    this.custom_ui.element.on("keydown keyup", (e) => {
                        e.stopPropagation()
                    });
                    $(window).on("beforeunload", function(e) {
                        console.log('GigaTester : Changes not saved')
                        if (this.unSavedChanges()) {
                            e.returnValue = "Are you sure you want to leave the page?";
                            return "Are you sure you want to leave the page?"
                        }
                    }.bind(this))
                },
                setNotifyStatus: function(message) {
                    if (!this.custom_ui.screen_status) {
                        this.custom_ui.screen_status = $("<gtdiv>").addClass("gigatester-screen-status").attr("data-html2canvas-ignore", "true");
                        this.custom_ui.screen_status.appendTo($(document.body));
                    }
                    this.custom_ui.screen_status.text(message);
                },
                clearNotifyStatus: function() {
                    if (this.custom_ui.screen_status) {
                        this.custom_ui.screen_status.remove();
                        this.custom_ui.screen_status = false
                    }
                },
                isAutoHide: function() {
                    if (this.canvas_mode) {
                        return true
                    }
                    return false
                },
                getFormSettings: function(form_type) {
                    return this.form_settings_default[form_type]
                },
                checkSessionStorage: function(){
                    if(sessionStorage){
                    for(let i=0; i<sessionStorage.length;i++){
                        const key = sessionStorage.key(i);
                        console.log(` GigaTester: ${key} => ${sessionStorage.getItem(key)}`)
                        if(key === 'gigatesterDefaultFeedbackCategory'){
                            GigaTester_modal.configs.feedback_default_category = sessionStorage.getItem(key).trim()
                        }
                        if(key === 'gigatesterDefaultBugsCategory'){
                            GigaTester_modal.configs.bugs_default_category = sessionStorage.getItem(key).trim()
                        }
                        if(key === 'gigatesterDefaultUserDetails'){
                            let userDetails = JSON.parse(sessionStorage.getItem(key))
                            Object.entries(userDetails).forEach(([key, val]) => {
                                if(key.trim().toLowerCase() == "email"){
                                    GigaTester.setEmail(val)
                                }
                                console.log('GigaTester : userDetails ', key, val);
                              });
                        }
                    }
                }
                },
                modalMessage: function(message) {
                    let modal_overlay = $("gtmodal");
                    if (!modal_overlay.length) {
                        modal_overlay = $("<gtmodal>").appendTo($(document.body))
                    }
                    modal_overlay.empty();
                    let modal = $("<gtdiv>").html(message).appendTo(modal_overlay);
                    let modal_close = $("<gtclose>").addClass("gigatester-modal-close").html(Svg_Icons.times).appendTo(modal);
                    let _documentKeyup = function(e) {
                        if (e.which === 27) {
                            this.modalClose();
                            $(document).off("keyup", _documentKeyup)
                        }
                    }.bind(this);
                    $(document).on("keyup", _documentKeyup);
                    modal_close.on("click", this.modalClose);
                    $(document.body).addClass("gigatester-modal-open");
                    return modal_overlay
                },
                modalConfirm: function(message, confirm_func, button_text) {
                    button_text = button_text || Lang.get("discard");
                    let buttons = '<div class="gigatester-modal-buttons">' + "<btn>" + Lang.get("cancel") + "</btn>" + '<btn class="gigatester-button-input">' + button_text + "</btn>" + "</div>";
                    let modal_overlay = this.modalMessage(message + buttons);
                    modal_overlay.find(".gigatester-modal-buttons btn:first").on("click", this.modalClose);
                    modal_overlay.find(".gigatester-modal-buttons btn:last").on("click", confirm_func)
                },
                modalClose: function() {
                    $("gtmodal").remove();
                    $(document.body).removeClass("gigatester-modal-open");
                },
                addCanvas: function() {
                    if (this.custom_ui.overlay) {
                        return
                    }
                    this.custom_ui.element.attr("drawing", "true");
                    this.hideControls();
                    let dpr = typeof window.devicePixelRatio === "undefined" ? 1 : window.devicePixelRatio;
                    this.custom_ui.overlay = $("<gtdiv>").addClass("gigatester-overlay").html('<gtdiv class="gigatester-overlay-boundary-top"></gtdiv>' + '<gtdiv class="gigatester-overlay-boundary-bottom"></gtdiv>' + '<gtdiv class="gigatester-overlay-boundary-left"></gtdiv>' + '<gtdiv class="gigatester-overlay-boundary-right"></gtdiv>').attr("dpr", dpr.toFixed(2)).attr("lang", GigaTester_modal.configs.language).attr("tooltype", this.Draw_Tools.type);
                    // .attr("data-html2canvas-ignore", "true");
                    if (this.canvas_mode) {
                        this.custom_ui.overlay.attr("canvas", "true")
                    }
                    this.custom_ui.overlay.appendTo($(document.getElementById('gigatester_image_overlay')));
                    this.setOverlaySize();
                    this.custom_ui.overlay.append('<svg id="snap_svg" xmlns="http://www.w3.org/2000/svg" width="100%" height="100%"></svg>');
                    this.Draw_Tools.init();
                    this.custom_ui.overlay.on("click mouseup mousedown mouseout mousemove mouseenter mouseleave touchstart touchmove touchcancel touchend", $.proxy(function(e) {
                        if (this.Draw_Tools.dragging_obj || this.Draw_Tools.draw_started) {
                            return
                        }
                        e.stopPropagation()
                    }, this));
                    this.overlay_hint_tooltip_added = false;
                    let setTooltipPos = function(e) {
                        if (!this.custom_ui.overlay_hint_tooltip) {
                            return
                        }
                        if (this.canvas_mode) {
                            this.custom_ui.overlay_hint_tooltip.css({
                                top: e.offsetY,
                                left: e.offsetX + 5
                            })
                        } else {
                            this.custom_ui.overlay_hint_tooltip.css({
                                top: e.clientY,
                                left: e.clientX + 5
                            })
                        }
                    }.bind(this);
                    this.custom_ui.overlay.on("mouseenter", function(e) {
                        if (!this.custom_ui.overlay.attr("screenshot-capturing") && !this.custom_ui.overlay_hint_tooltip && !this.overlay_hint_tooltip_added) {
                            console.log('GigaTester: overlay hint');
                            this.custom_ui.overlay_hint_tooltip = $("<div>").addClass("gigatester-overlay-hint-cursor");
                            setTooltipPos(e);
                            this.custom_ui.overlay_hint_tooltip.appendTo(this.custom_ui.overlay)
                        }
                    }.bind(this));
                    this.custom_ui.overlay.on("mousemove", function(e) {
                        setTooltipPos(e)
                    }.bind(this));
                    this.custom_ui.overlay.on("mouseleave", function() {
                        if (this.custom_ui.overlay_hint_tooltip) {
                            this.custom_ui.overlay_hint_tooltip.remove()
                        }
                        this.custom_ui.overlay_hint_tooltip = false
                    }.bind(this));
                    $(window).on("resize", $.proxy(this.windowResize, this))
                },
                setOverlaySize: function() {
                    if (!this.canvas_mode) {
                        return
                    }
                    if (!this.custom_ui.overlay) {
                        return
                    }
                    let canvas_target = $(this.canvas_target);
                    let canvas_target_offset = canvas_target.offset();
                    let canvas_target_width = canvas_target.width();
                    let canvas_target_height = canvas_target.height();
                    this.custom_ui.overlay.css({
                        top: canvas_target_offset.top,
                        left: canvas_target_offset.left,
                        width: canvas_target_width,
                        height: canvas_target_height
                    })
                },
                removeOverlay: function() {
                    if (!this.custom_ui.overlay) {
                        return
                    }
                    $(document.getElementById('gigatester_image_overlay')).remove()
                    this.custom_ui.element.removeAttr("drawing");
                    if (this.custom_ui.overlay.overlay_hint_tooltip) {
                        this.custom_ui.overlay.overlay_hint_tooltip.remove();
                        this.custom_ui.overlay.overlay_hint_tooltip = null
                    }
                    this.custom_ui.overlay.remove();
                    this.custom_ui.overlay = null;
                    $(window).off("resize", $.proxy(this.windowResize, this))
                },
                Draw_Tools: {
                    type: "square",
                    colour: {
                        options: ["#E80000", "#FF7E42", "#FFD042", "#84FF42", "#42FFE6", "#2878F0", "#7828F0", "#FF42F9", "#FFFFFF", "#000000"],
                        value:  "#E80000"
                    },
                    start_x: 0,
                    start_y: 0,
                    stop_x: 0,
                    stop_y: 0,
                    path_min_x: 0,
                    path_min_y: 0,
                    path_max_x: 0,
                    path_max_y: 0,
                    svg_delete_icons: [],
                    annotation_count: 0,
                    cut_outs: [],
                    svg_obj_base_path: false,
                    svg_obj_arrow_group: false,
                    svg_obj_new_arrow: false,
                    svg_obj_new_arrow_top: false,
                    svg_obj_line: false,
                    svg_obj_rectangular: false,
                    svg_obj_path: false,
                    draw_started: false,
                    dragging_obj: false,
                    image_capture: false,
                    toolbar: null,
                    min_drag_distance: 10,
                    toolbar_is_hidden: false,
                    init: function() {
                        this.snap = Snap("#snap_svg");
                        this.svg_obj_base_path = this.snap.path();
                        this.svg_obj_base_path.attr({
                            fill: "rgb(128, 144, 160)",
                            "fill-opacity": GigaTester_modal.canvas_mode ? 0 : .3,
                            "fill-rule": "evenodd"
                        });
                        this.setBasePathSize();
                        this.snap.drag(this.onDragMove.bind(this), this.isDragStart.bind(this), this.onsDragStop.bind(this));
                        this.snap.touchstart(this.isDragStart.bind(this));
                        this.snap.touchmove(this.onDragMove.bind(this));
                        this.snap.touchcancel(this.onsDragStop.bind(this));
                        this.snap.touchend(this.onsDragStop.bind(this));
                        this.addTools()
                    },
                    setBasePathSize: function() {
                        if (!this.svg_obj_base_path) {
                            return
                        }
                        var base_width = $("#snap_svg").width();
                        var base_height = $("#snap_svg").height();
                        var path = "M0 0 h" + base_width + " v" + base_height + " h-" + base_width + " Z";
                        for (var i = 0; i < this.cut_outs.length; i++) {
                            path += " M" + this.cut_outs[i].x + " " + this.cut_outs[i].y + " h" + this.cut_outs[i].w + " v" + this.cut_outs[i].h + " h-" + this.cut_outs[i].w + " Z"
                        }
                        this.svg_obj_base_path.attr("path", path)
                    },
                    addTools: function() {
                        if (GigaTester_modal.is_touch) {
                            GigaTester_modal.disableScroll()
                        }
                        if (this.toolbar) {
                            return
                        }
                        var tool_colour_indicator = "";
                        tool_colour_indicator += '<gtdiv class="gigatester-toolbar-tool-colour-indicator">';
                        tool_colour_indicator += "<gtcolourpicker>";
                        $.each(this.colour.options, function(index, colour) {
                            tool_colour_indicator += '<gtdiv class="gigatester-toolbar-tool-colour-indicator-option" data-colour="' + colour + '">' + '<span style="background-color:' + colour + ';"' + (colour === "#FFFFFF" ? ' hasborder="1"' : "") + "></span>" + "</gtdiv>"
                        });
                        tool_colour_indicator += "</gtcolourpicker>";
                        tool_colour_indicator += "</gtdiv>";
                        var display_tutorial = false;
                        var tools = '<btn class="gigatester-toolbar-tool gigatester-toolbar-tool-square" data-type="square" title="' + Lang.get("rectangle") + '">' + Svg_Icons.square + "</btn>"
                         + '<btn class="gigatester-toolbar-tool gigatester-toolbar-tool-path" data-type="path" title="' + Lang.get("pencil") + '">' + Svg_Icons.highlighter + "</btn>"
                         + '<btn class="gigatester-toolbar-tool gigatester-toolbar-tool-line" data-type="line" title="' + Lang.get("line") + '">' + Svg_Icons.line + "</btn>"
                         + '<btn class="gigatester-toolbar-tool gigatester-toolbar-tool-arrow" data-type="arrow" title="' + Lang.get("arrow") + '">' + Svg_Icons.arrow + "</btn>"
                         + '<btn class="gigatester-toolbar-tool gigatester-toolbar-tool-blackout" data-type="blackout" title="' + Lang.get("blackout") + '">' + Svg_Icons.blackout + "</btn>"
                         + '<btn class="gigatester-toolbar-tool gigatester-toolbar-tool-text" data-type="text" title="' + Lang.get("text") + '">' + Svg_Icons.text + "</btn>"
                         + '<btn class="gigatester-toolbar-tool gigatester-toolbar-tool-colour" data-type="colour">' + tool_colour_indicator + "</btn>"
                         + '<btn class="gigatester-toolbar-tool-done' + (GigaTester_modal.canvas_mode ? "gigatester-toolbar-tool-done-active" : "") + '" title="' + Lang.get("capture_screenshot") + '">' + Svg_Icons.tick + "<span>" + (Lang.get("next") ? Lang.get("capture") : Lang.get("save")) + "</span>" + "</btn>"
                         + (GigaTester_modal.canvas_mode ? "" : '<btn class="gigatester-toolbar-close" title="' + "Cancel" + '">' + "<span>" + Lang.get("cancel") + "<span>" + "</btn>") + (display_tutorial ? '<btn class="gigatester-toolbar-help">' + Svg_Icons.widget_question + "</btn>" : "");
                        this.toolbar = $("<gttoolbar>").attr("lang", GigaTester_modal.configs.language).attr("data-html2canvas-ignore", "true");
                        this.toolbar.html(tools);
                        this.setToolColour();
                        this.toolbar.appendTo($(document.body));
                        this.toolbar.on("mouseenter", $.proxy(function() {
                            if (this.draw_started || this.dragging_obj) {
                                this.toolbar.css("opacity", "0.5")
                            }
                        }, this));
                        this.toolbar.on("mouseleave", $.proxy(function() {
                            this.toolbar.css("opacity", "")
                        }, this));
                        this.toolbar.find('.gigatester-toolbar-tool[data-type="' + this.type + '"]').addClass("gigatester-toolbar-tool-active");
                        this.toolbar.find(".gigatester-toolbar-tool").on("click", $.proxy(function(e) {
                            var tool_type = $(e.currentTarget).data("type");
                            if (tool_type === "colour") {
                                return
                            } else if (tool_type === "blackout") {
                                this.colour.value = "#000000";
                                this.setToolColour()
                            }
                            this.type = tool_type;
                            this.toolbar.find(".gigatester-toolbar-tool").removeClass("gigatester-toolbar-tool-active");
                            $(e.currentTarget).addClass("gigatester-toolbar-tool-active");
                            GigaTester_modal.custom_ui.overlay.attr("tooltype", this.type)
                        }, this));
                        this.toolbar.find(".gigatester-toolbar-tool-done").on("click", function(e) {
                            e.stopPropagation();
                            e.preventDefault();
                            if (GigaTester_modal.configs.is_live_checked) {
                                GigaTester_modal.Draw_Tools.removeTools();
                                GigaTester_modal.setNotifyStatus("Taking screenshot...");
                                return
                            }
                            GigaTester_modal.hideCommentForm();
                            GigaTester_modal.finalScreenshot();
                        }.bind(this));
                        this.toolbar.find(".gigatester-toolbar-close").on("click", function(e) {
                            e.stopPropagation();
                            e.preventDefault();
                            this.cancelAnnotation();
                            GigaTester_modal.removeComments();
                            GigaTester_modal.Draw_Tools.image_capture = false;
                        }.bind(this));
                        this.toolbar.find(".gigatester-toolbar-tool-colour-indicator-option").on("click", $.proxy(function(e) {
                            var colour = $(e.currentTarget).data("colour");
                            var tool_type = $(e.currentTarget).parents(".gigatester-toolbar-tool:first").data("type");
                            this.colour.value = colour;
                            this.setToolColour()
                        }, this));
                        this.toolbar.on("click", function(e) {
                            e.stopPropagation()
                        })
                    },
                    cancelVideoCapture: function() {
                        this.cancelRoutingOption()
                    },
                    cancelAnnotation: function(e) {
                        this.cancelRoutingOption()
                    },
                    cancelRoutingOption: function() {
                        if (GigaTester_modal.controls_step) {
                            GigaTester_modal.form_data.rating = GigaTester_modal.form_data.rating;
                            GigaTester_modal.form_data.comment_field =  GigaTester_modal.form_data.comment_field;
                            GigaTester_modal.form_data.category = GigaTester_modal.form_data.category
                            GigaTester_modal.set_screen_default_category = false;
                            GigaTester_modal.saveCheckedCategory();
                            GigaTester_modal.setDialogForm();
                            console.log('GigaTester : cancel annotation')
                            GigaTester_modal.showControls();
                            if(GigaTester_modal.form_data.rating){
                                GigaTester_modal.selectedRating();
                            }
                
                            GigaTester_modal.saveSubCategory();
                            GigaTester_modal.removeOverlay();
                            this.removeTools()
                        } else {
                            GigaTester_modal.removeOverlay();
                            this.removeTools();
                            GigaTester_modal.reset()
                        }
                        if (GigaTester_modal.on_toolbar_close) {
                            GigaTester_modal.on_toolbar_close()
                        }
                    },
                    removeTools: function() {
                        GigaTester_modal.enableScroll();
                        if (!this.toolbar) {
                            return
                        }
                        this.toolbar.remove();
                        this.toolbar = null;
                        this.svg_obj_base_path = null;
                        this.cut_outs = []
                    },
                    removeDeleteIcons: function() {
                        $(this.svg_delete_icons).each(function() {
                            this.remove()
                        });
                        this.svg_delete_icons = []
                    },
                    setToolColour: function() {
                        this.toolbar.find(".gigatester-toolbar-tool-colour-indicator").css("background-color", this.colour.value);
                        if (this.colour.value === "#FFFFFF") {
                            this.toolbar.find(".gigatester-toolbar-tool-colour-indicator").attr("hasborder", 1)
                        } else {
                            this.toolbar.find(".gigatester-toolbar-tool-colour-indicator").removeAttr("hasborder")
                        }
                    },
                    isDragStart: function() {
                        var x, y, event;
                        if (typeof arguments[0] === "object") {
                            event = arguments[0]
                        } else {
                            event = arguments[2]
                        }
                        if (event.changedTouches && event.changedTouches.length) {
                            x = event.changedTouches[0].clientX;
                            y = event.changedTouches[0].clientY
                        } else {
                            x = event.clientX;
                            y = event.clientY
                        }
                        if (GigaTester_modal.canvas_mode) {
                            x = event.offsetX;
                            y = event.offsetY
                        }
                        x = parseInt(x, 10);
                        y = parseInt(y, 10);
                        if (this.dragging_obj) {
                            if (this.dragging_obj.data("drag_started")) {
                                return
                            }
                            this.dragging_obj.appendTo(self.snap);
                            this.dragging_obj.data("drag_started", true);
                            this.dragging_obj.data("original_x", x);
                            this.dragging_obj.data("original_y", y);
                            if (!this.dragging_obj.data("transform_x")) {
                                this.dragging_obj.data("transform_x", 0);
                                this.dragging_obj.data("transform_y", 0)
                            }
                            if (this.dragging_obj.data("type") === "square") {
                                var cut_out_x = this.dragging_obj[0].attr("x");
                                var cut_out_y = this.dragging_obj[0].attr("y");
                                var cut_out_index = false;
                                for (var i = 0; i < this.cut_outs.length; i++) {
                                    if (this.cut_outs[i].x == cut_out_x && this.cut_outs[i].y == cut_out_y) {
                                        cut_out_index = i;
                                        break
                                    }
                                }
                                if (cut_out_index !== false) {
                                    this.dragging_obj.data("cut_out_index", cut_out_index);
                                    this.dragging_obj.data("cut_out_original_x", this.cut_outs[cut_out_index].x);
                                    this.dragging_obj.data("cut_out_original_y", this.cut_outs[cut_out_index].y)
                                }
                            }
                        } else {
                            if (this.draw_started) {
                                console.log(this.image_capture, 'img capture')
                                return
                            }
                            this.draw_started = true;
                            var cut_out_id = (new Date).getTime();
                            switch (this.type) {
                                case "arrow":
                                    this.svg_obj_new_arrow = this.snap.line(x, y, x, y);
                                    this.svg_obj_new_arrow.attr({
                                        stroke: this.colour.value,
                                        "stroke-width": 3,
                                        "stroke-linecap": "round",
                                        "stroke-linejoin": "round"
                                    });
                                    var point1 = x + " " + y;
                                    var point2 = x + " " + y;
                                    var point3 = x + " " + y;
                                    this.svg_obj_new_arrow_top = this.snap.polyline(point1 + "," + point2 + "," + point3);
                                    this.svg_obj_new_arrow_top.attr({
                                        fill: this.colour.value
                                    });
                                    this.svg_obj_arrow_group = this.snap.group(this.svg_obj_new_arrow, this.svg_obj_new_arrow_top);
                                    this.svg_obj_arrow_group.attr({
                                        opacity: .5
                                    });
                                    break;
                                case "line":
                                    this.svg_obj_line = this.snap.line(x, y, x, y);
                                    this.svg_obj_line.attr({
                                        stroke: this.colour.value,
                                        "stroke-width": 4,
                                        "stroke-linecap": "round",
                                        "stroke-linejoin": "round",
                                        opacity: .5
                                    });
                                    break;
                                case "square":
                                    this.svg_obj_rectangular = this.snap.rect(x, y, 1, 1, 3, 3);
                                    this.svg_obj_rectangular.attr({
                                        stroke: this.colour.value,
                                        "stroke-width": 4,
                                        "stroke-linecap": "round",
                                        "stroke-linejoin": "round",
                                        fill: "transparent",
                                        opacity: .5
                                    });
                                    this.cut_outs.push({
                                        id: cut_out_id,
                                        x: x,
                                        y: y,
                                        w: 0,
                                        h: 0
                                    });
                                    break;
                                case "blackout":
                                    this.svg_obj_rectangular = this.snap.rect(x, y, 1, 1, 3, 3);
                                    this.svg_obj_rectangular.attr({
                                        fill: this.colour.value,
                                        class: "blackout",
                                        opacity: .5
                                    });
                                    break;
                                case "path":
                                    this.svg_obj_path = this.snap.path("M" + x + "," + y);
                                    this.svg_obj_path.attr({
                                        stroke: this.colour.value,
                                        "stroke-width": 5,
                                        "stroke-linecap": "round",
                                        "stroke-linejoin": "round",
                                        fill: "transparent",
                                        opacity: .8
                                    });
                                    break
                            }
                        }
                        this.start_x = x;
                        this.start_y = y;
                        this.stop_x = x;
                        this.stop_y = y;
                        this.path_min_x = x;
                        this.path_min_y = y;
                        this.path_max_x = x;
                        this.path_max_y = y;
                        this.toolbar_left = this.toolbar.offset().left - 30;
                        this.toolbar_right = this.toolbar_left + this.toolbar.outerWidth() + 60;
                        this.toolbar_top = this.toolbar.position().top - 30;
                        this.toolbar_bottom = this.toolbar_top + this.toolbar.outerHeight() + 60
                    },
                    onsDragStop: function(event) {
                        var x, y;
                        if (event.changedTouches && event.changedTouches.length) {
                            x = event.changedTouches[0].clientX;
                            y = event.changedTouches[0].clientY
                        } else {
                            x = event.clientX;
                            y = event.clientY
                        }
                        if (GigaTester_modal.canvas_mode) {
                            x = event.pageX - GigaTester_modal.custom_ui.overlay.offset().left;
                            y = event.pageY - GigaTester_modal.custom_ui.overlay.offset().top
                        }
                        if (this.dragging_obj) {
                            if (!this.dragging_obj.data("drag_started")) {
                                return
                            }
                            this.dragging_obj.data("drag_started", false);
                            this.dragging_obj.data("transform_x", this.dragging_obj.data("transform_x_temp"));
                            this.dragging_obj.data("transform_y", this.dragging_obj.data("transform_y_temp"));
                            var movement_x = Math.abs(this.start_x - x);
                            var movement_y = Math.abs(this.start_y - y);
                            if (!$(event.target).hasClass("gigatester-svg-delete") && movement_x <= 2 && movement_y <= 2) {
                                GigaTester_modal.canvasCommentStart.call(GigaTester_modal, event)
                            }
                            this.dragging_obj = false;
                            this.start_x = 0;
                            this.start_y = 0;
                            this.stop_x = 0;
                            this.stop_y = 0;
                            this.path_min_x = 0;
                            this.path_min_y = 0;
                            this.path_max_x = 0;
                            this.path_max_y = 0
                        } else {
                            if (!this.draw_started) {
                                return
                            }
                            this.toolbar.removeClass("gigatester-toolbar-slide-out");
                            var direction_x = x - this.start_x > 0 ? "right" : "left";
                            var direction_y = y - this.start_y > 0 ? "down" : "up";
                            if (this.type === "text" || Math.abs(this.path_max_x - this.path_min_x) < this.min_drag_distance && Math.abs(this.path_max_y - this.path_min_y) < this.min_drag_distance) {
                                switch (this.type) {
                                    case "arrow":
                                        this.svg_obj_arrow_group.remove();
                                        break;
                                    case "line":
                                        this.svg_obj_line.remove();
                                        break;
                                    case "square":
                                    case "blackout":
                                        this.svg_obj_rectangular.remove();
                                        break;
                                    case "path":
                                        this.svg_obj_path.remove();
                                        break
                                }
                                if (this.cut_outs.length) {
                                    var last_cut_out = this.cut_outs[this.cut_outs.length - 1];
                                    if (last_cut_out.w < this.min_drag_distance && last_cut_out.h < this.min_drag_distance) {
                                        this.cut_outs.splice(this.cut_outs.length - 1, 1)
                                    }
                                }
                                this.setBasePathSize();
                                GigaTester_modal.canvasCommentStart.call(GigaTester_modal, event);
                                GigaTester_modal.custom_ui.overlay.trigger("mouseleave")
                            } else {
                                var icon_x = x - 12;
                                var icon_y = y - 12;
                                if (this.type === "square" || this.type === "blackout") {
                                    icon_x = parseInt(this.svg_obj_rectangular.attr("x"), 10) + parseInt(this.svg_obj_rectangular.attr("width"), 10) - 12;
                                    icon_y = parseInt(this.svg_obj_rectangular.attr("y"), 10) - 12
                                }
                                var icon = this.snap.image(Svg_Icons.delete_icon, icon_x, icon_y, 24, 24).attr({
                                    cursor: "pointer",
                
                                }).addClass("_gigatester-blank gigatester-svg-delete");
                                this.svg_delete_icons.push(icon);
                                GigaTester_modal.canvasCommentStart.call(GigaTester_modal, event);
                                switch (this.type) {
                                    case "arrow":
                                        this.svg_obj_arrow_group.attr({
                                            opacity: 1
                                        });
                                        this.svg_obj_arrow_group = this.snap.group(this.svg_obj_arrow_group, icon);
                                        this.isHoverable(this.svg_obj_arrow_group, icon, this.type);
                                        this.isDraggable(this.svg_obj_arrow_group, this.type);
                                        break;
                                    case "line":
                                        this.svg_obj_line.attr({
                                            opacity: 1
                                        });
                                        this.svg_obj_line = this.snap.group(this.svg_obj_line, icon);
                                        this.isHoverable(this.svg_obj_line, icon, this.type);
                                        this.isDraggable(this.svg_obj_line, this.type);
                                        break;
                                    case "square":
                                        this.svg_obj_rectangular.attr({
                                            opacity: 1
                                        });
                                        this.svg_obj_rectangular = this.snap.group(this.svg_obj_rectangular, icon);
                                        this.isHoverable(this.svg_obj_rectangular, icon, this.type, this.cut_outs[this.cut_outs.length - 1].id);
                                        this.isDraggable(this.svg_obj_rectangular, this.type);
                                        break;
                                    case "blackout":
                                        this.svg_obj_rectangular.attr({
                                            opacity: 1
                                        });
                                        this.svg_obj_rectangular = this.snap.group(this.svg_obj_rectangular, icon);
                                        this.isHoverable(this.svg_obj_rectangular, icon, this.type);
                                        this.isDraggable(this.svg_obj_rectangular, this.type);
                                        break;
                                    case "path":
                                        this.svg_obj_path = this.snap.group(this.svg_obj_path, icon);
                                        this.isHoverable(this.svg_obj_path, icon, this.type);
                                        this.isDraggable(this.svg_obj_path, this.type);
                                        break
                                }
                            }
                            this.draw_started = false;
                            this.start_x = 0;
                            this.start_y = 0;
                            this.stop_x = 0;
                            this.stop_y = 0;
                            this.svg_obj_arrow_group = false;
                            this.svg_obj_new_arrow_top = false;
                            this.svg_obj_new_arrow = false;
                            this.svg_obj_line = false;
                            this.svg_obj_rectangular = false;
                            this.svg_obj_path = false;
                            this.toolbar.find(".gigatester-toolbar-tool-done").addClass("gigatester-toolbar-tool-done-active")
                        }
                        GigaTester_modal.overlay_hint_tooltip_added = true;
                        if (GigaTester_modal.custom_ui.overlay_hint_tooltip) {
                            GigaTester_modal.custom_ui.overlay_hint_tooltip.remove();
                            GigaTester_modal.custom_ui.overlay_hint_tooltip = false
                        }
                        console.log('GigaTester: drag stopped')
                        $(document.getElementsByClassName('.gigatester-button-input-save')).trigger('click')
                        GigaTester_modal.disableScroll()
                    },
                    onDragMove: function() {
                        var x, y, event;
                        if (typeof arguments[0] === "object") {
                            event = arguments[0]
                        } else {
                            event = arguments[4]
                        }
                        if (event.changedTouches && event.changedTouches.length) {
                            x = event.changedTouches[0].clientX;
                            y = event.changedTouches[0].clientY
                        } else {
                            x = event.clientX;
                            y = event.clientY
                        }
                        if (GigaTester_modal.canvas_mode) {
                            x = event.pageX - GigaTester_modal.custom_ui.overlay.offset().left;
                            y = event.pageY - GigaTester_modal.custom_ui.overlay.offset().top
                        }
                        if (this.dragging_obj) {
                            if (!this.dragging_obj.data("drag_started")) {
                                return
                            }
                            var t = new Snap.Matrix;
                            var mouse_movement_x = x - this.dragging_obj.data("original_x");
                            var mouse_movement_y = y - this.dragging_obj.data("original_y");
                            var transform_x = mouse_movement_x + this.dragging_obj.data("transform_x");
                            var transform_y = mouse_movement_y + this.dragging_obj.data("transform_y");
                            this.dragging_obj.data("transform_x_temp", transform_x);
                            this.dragging_obj.data("transform_y_temp", transform_y);
                            t.translate(transform_x, transform_y);
                            this.dragging_obj.transform(t);
                            if (this.dragging_obj.data("type") === "square") {
                                var cut_out_index = this.dragging_obj.data("cut_out_index");
                                this.cut_outs[cut_out_index].x = this.dragging_obj.data("cut_out_original_x") + transform_x;
                                this.cut_outs[cut_out_index].y = this.dragging_obj.data("cut_out_original_y") + transform_y;
                                this.setBasePathSize()
                            }
                        } else {
                            if (!this.draw_started) {
                                return
                            }
                            var direction_x = x - this.start_x > 0 ? "right" : "left";
                            var direction_y = y - this.start_y > 0 ? "down" : "up";
                            this.stop_x = x;
                            this.stop_y = y;
                            this.stop_x = Math.max(6, this.stop_x);
                            this.stop_y = Math.max(6, this.stop_y);
                            this.stop_x = Math.min(this.snap.node.clientWidth - 6, this.stop_x);
                            this.stop_y = Math.min(this.snap.node.clientHeight - 6, this.stop_y);
                            this.path_min_x = Math.min(this.path_min_x, x);
                            this.path_min_y = Math.min(this.path_min_y, y);
                            this.path_max_x = Math.max(this.path_max_x, x);
                            this.path_max_y = Math.max(this.path_max_y, y);
                            switch (this.type) {
                                case "arrow":
                                    this.svg_obj_new_arrow.attr({
                                        x2: this.stop_x,
                                        y2: this.stop_y
                                    });
                                    var x_length = Math.abs(this.stop_x - this.start_x);
                                    var y_length = Math.abs(this.stop_y - this.start_y);
                                    var y_amount = 40;
                                    if (x_length < y_amount && y_length < y_amount) {
                                        y_amount = Math.max(x_length, y_length)
                                    }
                                    var x_amount = y_amount / 2.5;
                                    var point1 = this.stop_x + " " + this.stop_y;
                                    var point2;
                                    var point3;
                                    var point4;
                                    var translate_y = 0;
                                    if (this.stop_y >= this.start_y) {
                                        point2 = this.stop_x - x_amount + " " + (this.stop_y - y_amount);
                                        point3 = this.stop_x + " " + (this.stop_y - y_amount + 5);
                                        point4 = this.stop_x + x_amount + " " + (this.stop_y - y_amount);
                                        translate_y = 8
                                    } else {
                                        point2 = this.stop_x - x_amount + " " + (this.stop_y + y_amount);
                                        point3 = this.stop_x + " " + (this.stop_y + y_amount - 5);
                                        point4 = this.stop_x + x_amount + " " + (this.stop_y + y_amount);
                                        translate_y = -8
                                    }
                                    this.svg_obj_new_arrow_top.attr({
                                        points: point1 + "," + point2 + "," + point3 + "," + point4 + "," + point1
                                    });
                                    var deg = Math.atan((this.stop_x - this.start_x) / (this.stop_y - this.start_y)) * 180 / Math.PI;
                                    if (!deg) {
                                        deg = 0
                                    }
                                    var arrow_2_matrix = new Snap.Matrix;
                                    arrow_2_matrix.rotate(deg * -1, this.stop_x, this.stop_y);
                                    arrow_2_matrix.translate(0, translate_y);
                                    this.svg_obj_new_arrow_top.transform(arrow_2_matrix);
                                    break;
                                case "line":
                                    this.svg_obj_line.attr({
                                        x2: this.stop_x,
                                        y2: this.stop_y
                                    });
                                    break;
                                case "square":
                                    var square_x = direction_x === "right" ? this.start_x : this.stop_x;
                                    var square_y = direction_y === "down" ? this.start_y : this.stop_y;
                                    var square_w = Math.abs(this.stop_x - this.start_x);
                                    var square_h = Math.abs(this.stop_y - this.start_y);
                                    this.svg_obj_rectangular.attr({
                                        x: square_x,
                                        y: square_y,
                                        width: square_w,
                                        height: square_h
                                    });
                                    this.cut_outs[this.cut_outs.length - 1].x = square_x;
                                    this.cut_outs[this.cut_outs.length - 1].y = square_y;
                                    this.cut_outs[this.cut_outs.length - 1].w = square_w;
                                    this.cut_outs[this.cut_outs.length - 1].h = square_h;
                                    this.setBasePathSize();
                                    break;
                                case "blackout":
                                    this.svg_obj_rectangular.attr({
                                        x: direction_x === "right" ? this.start_x : this.stop_x,
                                        y: direction_y === "down" ? this.start_y : this.stop_y,
                                        width: Math.abs(this.stop_x - this.start_x),
                                        height: Math.abs(this.stop_y - this.start_y)
                                    });
                                    break;
                                case "path":
                                    var current_path = this.svg_obj_path.attr("path");
                                    var new_path = current_path + "L" + this.stop_x + "," + this.stop_y;
                                    this.svg_obj_path.attr("path", new_path);
                                    break
                            }
                            if (Math.abs(this.stop_x - this.start_x) > this.min_drag_distance || Math.abs(this.stop_y - this.start_y) > this.min_drag_distance) {
                                if (this.stop_x > this.toolbar_left && this.stop_x < this.toolbar_right && this.stop_y > this.toolbar_top && this.stop_y < this.toolbar_bottom) {
                                    this.toolbar.addClass("gigatester-toolbar-slide-out");
                                    this.toolbar_is_hidden = true
                                } else if (this.toolbar_is_hidden) {
                                    this.toolbar.removeClass("gigatester-toolbar-slide-out");
                                    this.toolbar_is_hidden = false
                                }
                            }
                        }
                    },
                    isHoverable: function(obj, delete_icon, type, cut_out_id) {
                        var shadow_filter = this.snap.filter(Snap.filter.shadow(0, 0, 5, "black", .5));
                        var timeout_id = false;
                        var self = this;
                        this.annotation_count++;
                        var _doRemove = function() {
                            obj.remove();
                            if (type === "square") {
                                var cut_out_index = false;
                                for (var i = 0; i < self.cut_outs.length; i++) {
                                    if (self.cut_outs[i].id === cut_out_id) {
                                        cut_out_index = i;
                                        break
                                    }
                                }
                                if (cut_out_index !== false) {
                                    self.cut_outs.splice(cut_out_index, 1);
                                    self.setBasePathSize()
                                }
                            }
                        };
                        delete_icon.click(function(e) {
                            _doRemove();
                            this.annotation_count--;
                            if (this.annotation_count === 0) {
                                GigaTester_modal.enableScroll()
                            }
                        }.bind(this));
                        obj.mouseover(function() {
                            GigaTester_modal.custom_ui.overlay.attr("hidecursor", "true");
                            if (self.draw_started) {
                                return
                            }
                            clearTimeout(timeout_id);
                            delete_icon.attr("display", "");
                            this.attr({
                                filter: shadow_filter
                            })
                        });
                        obj.mouseout(function() {
                            GigaTester_modal.custom_ui.overlay.removeAttr("hidecursor");
                            timeout_id = setTimeout(function() {
                                delete_icon.attr("display", "none");
                                this.attr({
                                    filter: ""
                                })
                            }.bind(this), 200)
                        });
                        if (GigaTester_modal.has_touch) {
                            delete_icon.touchend(function() {
                                setTimeout(function() {
                                    _doRemove()
                                }, 0)
                            });
                            obj.touchstart(function() {
                                if (delete_icon.attr("display") === "none") {
                                    delete_icon.attr("display", "")
                                } else {
                                    delete_icon.attr("display", "none")
                                }
                            })
                        }
                    },
                    isDraggable: function(obj, type) {
                        var isDragStart = $.proxy(function(event, x, y) {
                            this.dragging_obj = obj;
                            this.dragging_obj.data("type", type)
                        }, this);
                        obj.attr({
                            cursor: "move"
                        });
                        obj.mousedown($.proxy(isDragStart, this));
                        obj.touchstart($.proxy(isDragStart, this))
                    }
                },
                windowResize: function(e) {
                    if (this.custom_ui.overlay) {
                        this.setOverlaySize();
                        this.Draw_Tools.setBasePathSize.call(this.Draw_Tools)
                    }
                },
                _mouseScroll: function(e) {
                    if ($(e.target).hasClass("gtmousescroll")) {} else {
                        e.preventDefault()
                    }
                },
                _scrollKeyDown: function(e) {
                    if ($(e.target).hasClass("gtmousescroll")) {
                        return
                    }
                    if ($(e.target).prop("tagName") === "TEXTAREA") {
                        return
                    }
                    let keys = {
                        37: 1,
                        38: 1,
                        39: 1,
                        40: 1
                    };
                    if (keys[e.keyCode]) {
                        e.preventDefault()
                    }
                },
                _scrollWindow: function(e) {
                    $(window).scrollTop(this._scroll_top)
                },
                disableScroll: function() {
                    if (this._scroll_disabled) {
                        return
                    }
                    if (this.canvas_mode) {
                        return
                    }
                    this._scroll_top = $(window).scrollTop();
                    this._scroll_disabled = true;
                    $("html").addClass("gt-noscroll");
                    $(window).on("scroll", $.proxy(this._scrollWindow, this));
                    window.addEventListener("wheel", this._mouseScroll, {
                        passive: false
                    });
                    window.addEventListener("mousewheel", this._mouseScroll, {
                        passive: false
                    });
                    window.addEventListener("DOMMouseScroll", this._mouseScroll, {
                        passive: false
                    });
                    window.addEventListener("touchmove", this._mouseScroll, {
                        passive: false
                    });
                    $(document).on("keydown", this._scrollKeyDown)
                },
                enableScroll: function() {
                    this._scroll_disabled = false;
                    $("html").removeClass("gt-noscroll");
                    $(window).off("scroll", $.proxy(this._scrollWindow, this));
                    window.removeEventListener("wheel", this._mouseScroll, {
                        passive: false
                    });
                    window.removeEventListener("mousewheel", this._mouseScroll, {
                        passive: false
                    });
                    window.removeEventListener("DOMMouseScroll", this._mouseScroll, {
                        passive: false
                    });
                    window.removeEventListener("touchmove", this._mouseScroll, {
                        passive: false
                    });
                    $(document).off("keydown", this._scrollKeyDown)
                },
                addCanvasComment: function(x, y) {
                    this.closeEmptyCanvasComment();
                    let screenshot_num = this.screenshot_data_uri.length;
                    let counter = 0;
                    $.each(this.comments, function(index, comment) {
                        if (comment.screenshot_num === screenshot_num) {
                            counter++
                        }
                    });
                    let comment = new Canvas_Comment({
                        x: x,
                        y: y,
                        scroll_l: this.canvas_mode ? 0 : $(window).scrollLeft(),
                        scroll_t: this.canvas_mode ? 0 : $(window).scrollTop(),
                        offset_x: this.canvas_mode ? this.custom_ui.overlay.offset().left : 0,
                        offset_y: this.canvas_mode ? this.custom_ui.overlay.offset().top : 0,
                        screenshot_num: screenshot_num,
                        counter: counter,
                        onOpen: $.proxy(function(counter) {
                            $.each(this.comments, function(index, comment) {
                                if (comment.screenshot_num === screenshot_num && comment.counter !== counter) {
                                    comment.hideForm()
                                    console.log('GigaTester: comment form open')
                                }
                            })
                        }, this),
                        onDelete: $.proxy(function(counter) {
                            let index_lookup = false;
                            $.each(this.comments, function(index, comment) {
                                if (comment.screenshot_num === screenshot_num && counter === comment.counter) {
                                    index_lookup = index
                                }
                            });
                            if (index_lookup !== false) {
                                this.comments.splice(index_lookup, 1)
                            }
                            let new_counter = 0;
                            $.each(this.comments, function(index, comment) {
                                if (comment.screenshot_num === screenshot_num) {
                                    comment.setCounter(new_counter);
                                    new_counter++
                                }
                            })
                        }, this)
                    });
                    comment.add();
                    this.comments.push(comment)
                },
                hideComments: function() {
                    $.each(this.comments, function(index, comment) {
                        comment.hide()
                    })
                },
                hideCommentForm: function() {
                    // console.log(GigaTester_modal.comments[])
                    $.each(this.comments, function(index, comment) {
                        comment.saveComment()
                    })
                    $.each(this.comments, function(index, comment) {
                        comment.hideForm()
                    })
                },
                removeComments: function() {
                    let screenshot_num = this.screenshot_data_uri.length;
                    let new_comments = [];
                    $.each(this.comments, function(index, comment) {
                        if (comment.screenshot_num === screenshot_num) {
                            comment.destroy()
                        } else {
                            new_comments.push(comment)
                        }
                    });
                    this.comments = new_comments
                },
                removeFeedbackView: function() {
                    if (!this.custom_ui.feedback_view) {
                        return
                    }
                    this.custom_ui.feedback_view.remove();
                    this.custom_ui.feedback_view = null
                },
                addControls: function() {
                    if (this.custom_ui.events) {
                        return
                    }
                    this.custom_ui.events = $("<div>").addClass("gigatester-controls gigatester-controls-" + this.configs.position);
                    this.custom_ui.events.attr("wstyle", this.configs.style);
                    if (this.configs.display_powered_by) {
                        this.custom_ui.events.attr("poweredby", 1)
                    }
                    this.custom_ui.events.attr("modal", "true")
                    if (this.configs.use_modal) {
                        this.custom_ui.events.attr("modal", "true")
                    }
                    this.setRoutings();
                    this.custom_ui.events.appendTo(this.custom_ui.element);
                    this.custom_ui.events.on("click", ".gigatester-controls-close", this.closeDialog.bind(this));
                    this.custom_ui.events.on("click", ".gigatester-feedback-type-draw", this.attachScreenshot.bind(this));
                    this.custom_ui.events.on("click", ".gigatester-feedback-type-video", this.startScreenRecorder.bind(this));
                    this.custom_ui.events.on("click", ".gigatester-feedback-type-form", this.menuItemClick.bind(this));
                    this.custom_ui.events.on("click", ".gigatester-controls-add-attachment", this.selectAttachment.bind(this));
                    this.custom_ui.events.on("click", "gtrating > gtdiv", this.selectRating.bind(this));
                    this.custom_ui.events.on("mouseenter", "gtrating > gtdiv", this.previewRating.bind(this));
                    this.custom_ui.events.on("mouseleave", "gtrating > gtdiv", this.unPreviewRating.bind(this));
                    this.custom_ui.events.on("change", ".gigatester-controls-attachment", this.uploadAttachment.bind(this));
                    this.custom_ui.events.on("submit", ".gigatester-controls-options", this.validateFields.bind(this));
                    this.custom_ui.events.on("change", 'select[name="category"]', this.changeCategory.bind(this));
                    this.custom_ui.events.on("change", 'select[name="severity"]', this.changeSeverity.bind(this));
                    this.custom_ui.events.on("click", ".gigatester-controls-video", this.startScreenRecorder.bind(this));
                    this.custom_ui.events.on("click", ".gigatester-controls-audio", this.recordAudio.bind(this));
                    this.custom_ui.events.on("click", ".gigatester-controls-screenshot", this.overlayImage.bind(this));
                    this.custom_ui.events.on("click", ".gigatester-controls-add-screenshot", this.attachScreenshot.bind(this));
                    this.custom_ui.events.on("click", ".gigatester-checkbox-container > gtdiv", this.checkboxToggle.bind(this));
                    this.custom_ui.events.on("keyup", 'textarea[name="description"]', this.rememberFormData.bind(this));
                    this.custom_ui.events.on("keyup", 'input[name="name"]', this.rememberFormData.bind(this));
                    this.custom_ui.events.on("keyup", 'input[name="email"]', this.rememberFormData.bind(this));
                    this.custom_ui.events.on("keyup", 'input[name="title"]', this.rememberFormData.bind(this));
                    this.custom_ui.events.on("change", 'select[name="category"]', this.rememberFormData.bind(this));
                    this.custom_ui.events.on("change", 'select[name="severity"]', this.rememberFormData.bind(this));
                    this.custom_ui.events.on("change", 'select[name="assignee"]', this.rememberFormData.bind(this));
                    this.custom_ui.events.on("click mouseup mousedown", function(e) {
                        e.stopPropagation()
                    })
                },
                rememberFormData: function(e) {
                    let field_name = $(e.currentTarget).attr("name");
                    if (field_name && typeof this.form_data[field_name] !== "undefined") {
                        this.form_data[field_name] = $(e.currentTarget).val()
                        // console.log( field_name,  $(e.currentTarget).val())
                        if(field_name === 'category'){
                        if($(document.getElementById('gigatester-reason-checkbox'))){
                            $(document.getElementsByClassName('gigatester-reason-checkboxes')).remove();
                            $(document.getElementsByClassName('gigatester-reason-labels')).next().remove("br");
                            $(document.getElementsByClassName('gigatester-reason-labels')).remove();
                        }
                        console.log(GigaTester_modal.form_type, "form type");
                        if(GigaTester_modal.form_type === "BUGS"){
                            GigaTester_modal.configs.config_data[0].bugSettings.categories.map(items => {
                                if(items.name.trim() == $(e.currentTarget).val().trim()){
                                    items.feedbacks.forEach( function(value){
                                    let feedback_reason = ' <input id="gigatester-reason-checkbox" class="gigatester-reason-checkboxes" type="checkbox"> <label class="gigatester-reason-labels" id="gigatester-reason-label">' + value + '</label> <br>'
                                    $(feedback_reason).insertAfter($(document.getElementById('category')))
                                    })
                                }
                            })
                        }
                        else if(GigaTester_modal.form_type === "FEEDBACK"){
                            GigaTester_modal.configs.config_data[0].feedbackSettings.categories.map(items => {
                                if(items.name.trim() == $(e.currentTarget).val().trim()){
                                    items.feedbacks.forEach( function(value){
                                    let feedback_reason = ' <input id="gigatester-reason-checkbox" class="gigatester-reason-checkboxes" type="checkbox"> <label class="gigatester-reason-labels" id="gigatester-reason-label">' + value + '</label> <br>'
                                    $(feedback_reason).insertAfter($(document.getElementById('category')))
                                    })
                                }
                            })
                        }

                    }
                    }
                },
                setCategory: function(){
                    if(GigaTester_modal.form_type === "BUGS"){
                        GigaTester_modal.configs.categories = [];
                        let category = GigaTester_modal.configs.config_data[0].bugSettings.categories;
                        category.map(item => {
                            console.log('GigaTester: ', item.name)
                        GigaTester_modal.configs.categories.push(item.name.trim())
                        })
                        console.log('GigaTester: Default Category ', GigaTester_modal.configs.bugs_default_category)
                        if(GigaTester_modal.configs.bugs_default_category){
                            GigaTester.setDefaultCategory(GigaTester_modal.configs.bugs_default_category.trim(), "BUGS")
                        }
                        else{
                            GigaTester_modal.form_data['category'] = 'category';
                        }
                    }
                    else if(GigaTester_modal.form_type === "FEEDBACK"){
                        GigaTester_modal.configs.categories = [];
                        let category = GigaTester_modal.configs.config_data[0].feedbackSettings.categories;
                        category.map(item => {
                        GigaTester_modal.configs.categories.push(item.name.trim())
                        })
                        if(GigaTester_modal.configs.feedback_default_category){
                            GigaTester.setDefaultCategory(GigaTester_modal.configs.feedback_default_category, "FEEDBACK")
                        }
                        else{
                            GigaTester_modal.form_data['category'] = 'category';
                        }
                    }
                },
                checkDefaultCategory: function(){
                    if(GigaTester_modal.form_type === "BUGS"){
                        if(GigaTester_modal.default_category_callback.length){
                            GigaTester.selectDefaultCategory(GigaTester_modal.default_category_callback, "BUGS");
                        }
                    }
                    else if(GigaTester_modal.form_type === "FEEDBACK"){
                        if(GigaTester_modal.default_category_callback.length){
                            GigaTester.selectDefaultCategory(GigaTester_modal.default_category_callback, "FEEDBACK");
                        }
                    }
                },
                saveCheckedCategory: function(){
                    GigaTester_modal.configs.selected_category = [];
                    $('.gigatester-reason-checkboxes:checked').each(function () {
                        GigaTester_modal.configs.selected_category.push($(this).next("label").text());
                        console.log(GigaTester_modal.configs.selected_category, 'data push')
                    });
                },
                showSubCategory: function(){
                    if(GigaTester_modal.form_type === "BUGS"){
                        GigaTester_modal.configs.config_data[0].bugSettings.categories.map(items => {
                            console.log(items.name)
                            if($(document.getElementById('category')).val()){
                            if(items.name.trim() == $(document.getElementById('category')).val().trim()){
                            items.feedbacks.forEach( function(value){
                            let feedback_reason = ' <input id="gigatester-reason-checkbox" class="gigatester-reason-checkboxes" type="checkbox"> <label class="gigatester-reason-labels" id="gigatester-reason-label">' + value + '</label> <br>'
                            $(feedback_reason).insertAfter($(document.getElementById('category')))
                            })
                        }
                        }
                    })
                    }
                    else if(GigaTester_modal.form_type === "FEEDBACK"){
                        GigaTester_modal.configs.config_data[0].feedbackSettings.categories.map(items => {
                         if($(document.getElementById('category')).val()){
                            if(items.name.trim() == $(document.getElementById('category')).val().trim()){
                            items.feedbacks.forEach( function(value){
                            let feedback_reason = ' <input id="gigatester-reason-checkbox" class="gigatester-reason-checkboxes" type="checkbox"> <label class="gigatester-reason-labels" id="gigatester-reason-label">' + value + '</label> <br>'
                            $(feedback_reason).insertAfter($(document.getElementById('category')))
                            })
                        }
                        }
                    })
                    }
                },
                saveSubCategory: function() {
                        if($(document.getElementById('gigatester-reason-checkbox'))){
                            $(document.getElementsByClassName('gigatester-reason-checkboxes')).remove();
                            $(document.getElementsByClassName('gigatester-reason-labels')).next().remove("br");
                            $(document.getElementsByClassName('gigatester-reason-labels')).remove();
                        }
                        if(GigaTester_modal.form_type === "BUGS"){
                            GigaTester_modal.configs.config_data[0].bugSettings.categories.map(items => {
                             if($(document.getElementById('category')).val()){
                                if(items.name.trim() == $(document.getElementById('category')).val().trim()){
                                items.feedbacks.forEach( function(value){
                                let feedback_reason = ' <input id="gigatester-reason-checkbox" class="gigatester-reason-checkboxes" type="checkbox"> <label class="gigatester-reason-labels" id="gigatester-reason-label">' + value + '</label> <br>'
                                $(feedback_reason).insertAfter($(document.getElementById('category')))
                                })
                            }
                            }
                        })
                        }
                        else if(GigaTester_modal.form_type === "FEEDBACK"){
                            GigaTester_modal.configs.config_data[0].feedbackSettings.categories.map(items => {
                                // console.log(items.name)
                                // console.log(GigaTester.category)
                                // console.log($(document.getElementById('category')).val(), 'selected')
                             if($(document.getElementById('category')).val()){
                                if(items.name.trim() == $(document.getElementById('category')).val().trim()){
                                items.feedbacks.forEach( function(value){
                                // console.log(value, 'value')
                                // console.log($(document.getElementById('category')).val(), 'selected')
                                let feedback_reason = ' <input id="gigatester-reason-checkbox" class="gigatester-reason-checkboxes" type="checkbox"> <label class="gigatester-reason-labels" id="gigatester-reason-label">' + value + '</label> <br>'
                                $(feedback_reason).insertAfter($(document.getElementById('category')))
                                })
                            }
                            }
                        })
                        }
                    GigaTester_modal.configs.selected_category.map(function (value){
                                $('.gigatester-reason-checkboxes').each(function () {
                                if($(this).next("label").text() == value){
                                // console.log($(this).next("label").text(), 'label');
                                $(this).attr('checked', 'true')
                                // console.log(GigaTester_modal.configs.selected_category, 'data publish')
                                }
                            })
                        });
                    },

                removeControls: function() {
                    if (!this.custom_ui.events) {
                        return
                    }
                    this.custom_ui.events.remove();
                    this.custom_ui.events = null
                },
                setRoutings: function() {
                    let routing_items = {};
                    routing_items.screenshot = this.configs.workflow_type.indexOf("capture") === -1 ? "" : '<gtroutemenu class="gigatester-feedback-type-draw">' + Svg_Icons.feedback_screenshot + "<gtdiv>" + (String_Validator.validate(this.configs.text_screenshot) || Lang.get("attach_a_screenshot")) + "</gtdiv>" + "<gtdiv>" + (String_Validator.validate(this.configs.text_screenshot_help) || Lang.get("draw_on_the_screen_help")) + "</gtdiv>" + "</gtroutemenu>";
                    routing_items.video = this.configs.workflow_type.indexOf("video") === -1 || !this.configs.has_video || GigaTester_modal.is_mobile ? "" : '<gtroutemenu class="gigatester-feedback-type-video">' + Svg_Icons.feedback_video + "<gtdiv>" + (String_Validator.validate(this.configs.text_video) || Lang.get("capture_screen_recorder", true)) + "</gtdiv>" + "<gtdiv>" + (String_Validator.validate(this.configs.text_video_help) || Lang.get("capture_video_help", true)) + "</gtdiv>" + "</gtroutemenu>";
                    routing_items.BUGS = this.configs.workflow_type.indexOf("BUGS") === -1 ? "" : '<gtroutemenu class="gigatester-feedback-type-form" data-type="BUGS">' + Svg_Icons.feedback_bug + "<gtdiv>" +  Lang.get("report_bug", true) + "</gtdiv>" + "<gtdiv>" +  Lang.get("report_bug_help", true) + "</gtdiv>" + "</gtroutemenu>";
                    routing_items.FEATURE = this.configs.workflow_type.indexOf("FEATURE") === -1 ? "" : '<gtroutemenu class="gigatester-feedback-type-form" data-type="FEATURE">' + Svg_Icons.feedback_feature + "<gtdiv>" +  Lang.get("FEATURE", true) + "</gtdiv>" + "<gtdiv>" + (String_Validator.validate(this.configs.text_feature_help) || Lang.get("feature_request", true)) + "</gtdiv>" + "</gtroutemenu>";
                    routing_items.FEEDBACK = this.configs.workflow_type.indexOf("FEEDBACK") === -1 ? "" : '<gtroutemenu class="gigatester-feedback-type-form" data-type="FEEDBACK">' + Svg_Icons.feedback_general + "<gtdiv>" +  Lang.get("general_feedback") + "</gtdiv>" + "<gtdiv>" +  Lang.get("general_feedback_help") + "</gtdiv>" + "</gtroutemenu>";
                    routing_items.view_other = this.configs.display_feedback ? '<gtroutemenu class="gigatester-feedback-type-other">' + Svg_Icons.feedback_other + "<gtdiv>" + (String_Validator.validate(this.configs.text_view_other) || Lang.get("view_other_feedback")) + "</gtdiv>" + "<gtdiv>" + (String_Validator.validate(this.configs.text_view_other_help) || Lang.get("view_other_feedback_help", true)) + "</gtdiv>" + "</gtroutemenu>" : "";
                    routing_items.help = this.configs.help_link ? '<gtroutemenu class="gigatester-feedback-type-help">' + Svg_Icons.feedback_help + "<gtdiv>" + (this.configs.help_title ? String_Validator.validate(this.configs.help_title) : Lang.get("contact_us")) + "</gtdiv>" + "<gtdiv>" + (this.configs.help_message ? String_Validator.validate(this.configs.help_message) : Lang.get("contact_us_help")) + "</gtdiv>" + "</gtroutemenu>" : "";
                    let item_order = this.configs.routing_item_order.split(",");
                    let routing_item_options = "";
                    $.each(routing_items, function(item_type, item) {
                        if (item_order.indexOf(item_type) === -1) {
                            routing_item_options += item
                        }
                    });
                    item_order.forEach(function(item_type) {
                        if (typeof routing_items[item_type]) {
                            routing_item_options += routing_items[item_type] || ""
                        }
                    });
                    let html = "";
                    html += '<gtdiv class="gigatester-dialog-scroll">';
                    html += '<gtclose class="gigatester-controls-close" title="' + Lang.get("close") + '">' + Svg_Icons.times + "</gtclose>";
                    html += '<gtheader class="gigatester-controls-header" title="GigaTester">'+ String_Validator.validate(this.configs.title) + '</gtheader>'
                    html += this.configs.logo ? '<img class="gigatester-controls-logo" src="' + String_Validator.validate(this.configs.logo) + '">' : "";
                    html += '<gtdiv class="gigatester-controls-step" data-step="1">' + routing_item_options + "</gtdiv>";
                    html += '<gtdiv class="gigatester-controls-step" data-step="2"></gtdiv>';
                    if (this.configs.display_powered_by) {
                        html += "<gtfooter>" + "<span>Powered by</span>" + "<span class='gigatester-powered-by-logo'>" + " GigaTester" + "</span>" + "</a>" + "</gtfooter>"
                    }
                    this.custom_ui.events.html(html);
                    this.setDialogForm();
                    let has_help = this.configs.help_link ? true : false;
                    let has_one_type = (this.configs.workflow_type === "capture" || this.configs.workflow_type === "video" || this.configs.workflow_type === "FEEDBACK" || this.configs.workflow_type === "bug" || this.configs.workflow_type === "FEATURE") && !this.configs.display_feedback;
                    if (has_one_type && !has_help) {
                        this.custom_ui.events.find('.gigatester-controls-step[data-step="1"]').hide();
                        this.custom_ui.events.find('.gigatester-controls-step[data-step="2"]').show()
                    } else {
                        this.custom_ui.events.find('.gigatester-controls-step[data-step="1"]').show();
                        this.custom_ui.events.find('.gigatester-controls-step[data-step="2"]').hide()
                    }
                },
                setDialogForm: function() {
                    let form_settings = this.getFormSettings(this.form_type);
                    console.log('GigaTester : form settings ', form_settings);
                    console.log('GigaTester : dialog refresh mode', GigaTester_modal.set_screen_default_category)
                    if(GigaTester_modal.set_screen_default_category){
                    GigaTester_modal.setCategory();
                    }
                    let display_screenshot = form_settings.allow_screenshot;
                    let display_audio = form_settings.allow_audio;
                    let display_video = form_settings.allow_video && this.configs.has_video && !GigaTester_modal.is_mobile && !this.canvas_mode;
                    let display_attachment = form_settings.allow_attachment  && typeof FileReader !== "undefined";
                    let data_item = 0;
                    let details = navigator.userAgent;
                    let regexp = /android|iphone|kindle|ipad/i;
                    let isMobileDevice = regexp.test(details);
                    if (isMobileDevice) {
                        console.log("You are using a Mobile Device : " + navigator.userAgent);
                        display_screenshot = false;
                        display_video = false;
                    } else {
                        let userAgent = navigator.userAgent;
                        let browserName;

                        if(userAgent.match(/chrome|chromium|crios/i)){
                            browserName = "chrome";
                        }else if(userAgent.match(/firefox|fxios/i)){
                            browserName = "firefox";
                        }  else if(userAgent.match(/safari/i)){
                            browserName = "safari";
                        }else if(userAgent.match(/opr\//i)){
                            browserName = "opera";
                        } else if(userAgent.match(/edg/i)){
                            browserName = "edge";
                        }else{
                            browserName="No browser detection";
                        }
                    }
                    data_item += display_screenshot ? 1 : 0;
                    data_item += display_video ? 1 : 0;
                    data_item += display_audio ? 1 : 0;
                    data_item += display_attachment ? 1 : 0;
                    let default_name = this.form_data.name || GigaTester.name || GigaTester_modal.name 
                    let default_email = this.form_data.email || GigaTester.email || GigaTester_modal.email 
                    let default_title = this.form_data.title || "";
                    let default_description = this.form_data.description || "";
                    let default_category = this.form_data.category || GigaTester.category || GigaTester_modal.categories || "";
                    let default_severity = this.form_data.severity || GigaTester.severity || GigaTester_modal.severity || "";
                    let default_rating = this.form_data.rating || 0;
                    let severity_options = '<option value="critical">Critical</option>' + '<option value="high">High</option>' + '<option value="medium">Medium</option>' + '<option value="low">Low</option>';
                    let category_options = "";
                    let reason_options = "";
                    if (form_settings.display_category) {
                        this.configs.categories.forEach(function(category) {
                            category_options += "<option>" + category + "</option>"
                        }.bind(this))
                    }
                    if (form_settings.severity_options) {
                        this.configs.severities.forEach(function(reason) {
                            reason_options += "<option>" + reason + "</option>"
                        }.bind(this))
                    }
                    let rating_icons = "";
                    if (form_settings.rating_type === "EMOJI") {
                        rating_icons += '<gtdiv data-rating="hate" class="inactive">' + Svg_Icons.face_hate + "</gtdiv>" + '<gtdiv data-rating="dislike" class="inactive">' + Svg_Icons.face_dislike + "</gtdiv>" + '<gtdiv data-rating="neutral" class="inactive">' + Svg_Icons.face_neutral + "</gtdiv>" + '<gtdiv data-rating="like" class="inactive">' + Svg_Icons.face_like + "</gtdiv>" + '<gtdiv data-rating="love" class="inactive">' + Svg_Icons.face_love + "</gtdiv>"
                    } else if (form_settings.rating_type === "STAR") {
                        rating_icons += '<gtdiv data-rating="star_1" class="inactive">' + Svg_Icons.star + "</gtdiv>" + '<gtdiv data-rating="star_2" class="inactive">' + Svg_Icons.star + "</gtdiv>" + '<gtdiv data-rating="star_3" class="inactive">' + Svg_Icons.star + "</gtdiv>" + '<gtdiv data-rating="star_4" class="inactive">' + Svg_Icons.star + "</gtdiv>" + '<gtdiv data-rating="star_5" class="inactive">' + Svg_Icons.star + "</gtdiv>"
                    } else if (form_settings.rating_type === "HEART") {
                        rating_icons += '<gtdiv data-rating="heart_1" class="inactive">' + Svg_Icons.heart + "</gtdiv>" + '<gtdiv data-rating="heart_2" class="inactive">' + Svg_Icons.heart + "</gtdiv>" + '<gtdiv data-rating="heart_3" class="inactive">' + Svg_Icons.heart + "</gtdiv>" + '<gtdiv data-rating="heart_4" class="inactive">' + Svg_Icons.heart + "</gtdiv>" + '<gtdiv data-rating="heart_5" class="inactive">' + Svg_Icons.heart + "</gtdiv>"
                    } else if (form_settings.rating_type === "THUMB") {
                        rating_icons += '<gtdiv data-rating="thumb_up" class="inactive">' + Svg_Icons.thumb_up + "</gtdiv>" + '<gtdiv data-rating="thumb_down" class="inactive">' + Svg_Icons.thumb_down + "</gtdiv>"
                    }
                    let html = "";
                    html += '<form class="gigatester-controls-options">'
                     + (form_settings.rating_title_message ? '<div class="gigatester-controls-help-message">' + String_Validator.validate(form_settings.rating_title_message) + "</div>" : "")
                     + (form_settings.rating_type ? "<gtrating>" + rating_icons + "</gtrating><gtdiv class='gigatester-controls-loader-toggle'><gtloader id='gigatester-loader'></gtloader></gtdiv>" : "")
                     + '<gtdiv class="gigatester-controls-form"'
                     + (form_settings.rating_type && form_settings.rating_mandatory ? ' style="display:none;"' : "") + ">"
                     + (form_settings.name_field ? '<input type="text" name="name" placeholder="' + Lang.get("your_name") + '"'
                     + (form_settings.name_field_mandatory ? " required" : "") + ">" : "")
                     + (form_settings.bug_title_message ? '<gtheader class="gigatester-bug-help-message"> ' + form_settings.bug_title_message + '</gtheader>' : "")
                     + (form_settings.email_field ? '<input type="email" name="email" placeholder="' + Lang.get("your_email_address") + '"' + (form_settings.email_field_mandatory ? " required" : "") + (form_settings.email_field_disable ? " disabled" : "") + ">" : "")
                     + (form_settings.display_category ? '<select id="category" name="category"'
                     + (form_settings.category_field_mandatory ? " required" : "")
                     + '><option id="category" value="category" selected disabled>' + Lang.get("select_a_category") + "</option>" + category_options + "</select>" : "")
                     + (form_settings.display_category ? '<gtdiv id="category_standard_feedback"></gtdiv>' : '')
                     + (form_settings.display_severity ? '<select id="severity" name="severity"' + (form_settings.severity_field_mandatory ? " required" : "") + '><option value="severity" selected disabled>' + Lang.get("select_a_severity") + "</option>" + severity_options + "</select>" : "")
                     + (form_settings.title_field ? '<input type="text" name="title" maxlength="80" data-gramm_editor="false" placeholder="' + (String_Validator.validate(form_settings.title_field_placeholder) || Lang.get("feedback_title", true)) + '"' + (form_settings.title_field_mandatory ? " required" : "") + ">" : "")
                     + (form_settings.comment_field ? '<textarea name="description" data-gramm_editor="false" placeholder="' + (String_Validator.validate(form_settings.comment_field_placeholder) || Lang.get("leave_us_your_comment")) + '"'
                     + (form_settings.comment_field_mandatory ? " required" : "") + "></textarea>" : "")
                     + (display_screenshot || display_audio || display_video || display_attachment ?  GigaTester_modal.recording ? '<gtdiv class="gigatester-controls-attach-actions" >' + "<gtdiv>" : '<gtdiv class="gigatester-controls-attach-actions" data-item="' + data_item + '">' + "<gtdiv>"
                     + (display_screenshot ? '<btn class="gigatester-controls-screenshot">' + Svg_Icons.feedback_screenshot + "<gtdiv>" + Lang.get("attach_a_screenshot") + "</gtdiv>"
                     + "<gttooltip>" + Lang.get("attach_a_screenshot") + "</gttooltip>"
                     + '<div class="gigatester-screenshot-preview-checkmark">' + Svg_Icons.checkmark + "</div>" + "</btn>" : "")
                     + (display_audio ? '<btn class="gigatester-controls-audio">' + Svg_Icons.mic + "<gtdiv>" + Lang.get("capture_audio") + "</gtdiv>"
                     + "<gttooltip>" + Lang.get("capture_audio") + "</gttooltip>" + '<div class="gigatester-screenshot-preview-checkmark">' + Svg_Icons.checkmark + "</div>" + "</btn>" : "")
                     + (display_video ?  '<btn class="gigatester-controls-video">' + Svg_Icons.feedback_video + "<gtdiv>" + Lang.get("capture_screen_recorder") + "</gtdiv>"
                     + "<gttooltip>" + Lang.get("capture_screen_recorder") + "</gttooltip>" + '<div class="gigatester-screenshot-preview-checkmark">' + Svg_Icons.checkmark + "</div>" + "</btn>" : "")
                     + (display_attachment ?'<btn class="gigatester-controls-add-attachment">' + Svg_Icons.paperclip + "<gtdiv>" + Lang.get("attach_a_file") + "</gtdiv>" + "<gttooltip>" + Lang.get("attach_a_file")
                     + "</gttooltip>" + '<div class="gigatester-screenshot-preview-checkmark">' + Svg_Icons.checkmark + "</div>" + "</btn>" : "") + "</gtdiv>"
                     + '<input type="file" class="gigatester-controls-attachment">' + "</gtdiv>" : "")
                     + '<gtdiv class="gigatester-controls-screenshot-preview">' + '<btn class="gigatester-controls-remove-screenshot">' + Svg_Icons.trash + "</btn>"
                     + '<gtbadge class="gigatester-controls-screenshot-thumbnail">' + Svg_Icons.photo + "<span>" + Lang.get("screenshot_attached") + "</span>" + '<div class="gigatester-screenshot-preview"></div>' + "</gtbadge>" +  "</gtdiv>"
                     + '<gtdiv class="gigatester-controls-video-preview">' + '<btn class="gigatester-controls-remove-video">' + Svg_Icons.trash + "</btn>"
                     + '<gtbadge class="gigatester-controls-video-thumbnail">' + Svg_Icons.play + "<span>" + Lang.get("screen_recording") + "</span>"
                     + "</gtbadge>" + "</gtdiv>" + '<gtdiv class="gigatester-controls-attachment-name">' + Svg_Icons.paperclip + "<span></span>"
                     + '<btn class="gigatester-controls-remove-attachment">' + Svg_Icons.trash + "</btn>"
                     + "</gtdiv>" + (form_settings.custom_field_1_type === "disclaimer" && form_settings.custom_field_1_label ? '<gtdiv class="gigatester-disclaimer">' + Lib.htmlEntitiesWithA(form_settings.custom_field_1_label, true) + "</gtdiv>" : "")
                     + (form_settings.custom_field_1_type === "checkbox" ? '<gtdiv class="gigatester-checkbox-container">' + '<input type="checkbox"' + (form_settings.custom_field_1_mandatory ? " required" : "") + ">"
                     + "<gtdiv>" + '<gtdiv class="gigatester-checkbox">' + Svg_Icons.check + "</gtdiv>" + '<gtdiv class="gigatester-checkbox-label">' + Lib.htmlEntitiesWithA(form_settings.custom_field_1_label, true) + "</gtdiv>" + "</gtdiv>" + "</gtdiv>" : "")
                     + '<button class="gigatester-controls-send gigatester-button-input">' + '<span class="gigatester-controls-send-progress"></span>' + '<span class="gigatester-controls-send-text">' +  Lang.get("send") + "</span>" + "</button>" + "</gtdiv>" + "</form>";
                   this.custom_ui.events.find('.gigatester-controls-step[data-step="2"]').html(html);
                    if(GigaTester_modal.configs.rating_limit > 4){
                        this.custom_ui.events.find(".gigatester-controls-form").show();
                        this.focusControls();
                    }
                    if (default_rating) {
                        this.custom_ui.events.find('gtrating gtdiv[data-rating="' + default_rating + '"]').click()
                    }
                    if (default_name) {
                        this.custom_ui.events.find('.gigatester-controls-step[data-step="2"]').find('input[name="name"]').val(default_name)
                    }
                    if (default_email) {
                        this.custom_ui.events.find('.gigatester-controls-step[data-step="2"]').find('input[name="email"]').val(default_email)
                    }
                    if (default_title) {
                        this.custom_ui.events.find('.gigatester-controls-step[data-step="2"]').find('input[name="title"]').val(default_title)
                    }
                    if (default_description) {
                        this.custom_ui.events.find('.gigatester-controls-step[data-step="2"]').find('textarea[name="description"]').val(default_description)
                    }
                    if (default_category) {
                        this.custom_ui.events.find('.gigatester-controls-step[data-step="2"]').find('select[name="category"]').val(default_category)
                    }
                    if (default_severity) {
                        this.custom_ui.events.find('.gigatester-controls-step[data-step="2"]').find('select[name="severity"]').val(default_severity)
                    }
                    GigaTester_modal.saveSubCategory();
                },
                menuItemClick: function(e) {
                    this.form_type = $(e.currentTarget).data("type");
                    let direct_to = "form";
                    if (this.form_type === "BUGS") {
                        direct_to = this.configs.direct_to_bug
                    } else if (this.form_type === "FEATURE") {
                        direct_to = this.configs.direct_to_feature_request
                    } else {
                        direct_to = this.configs.direct_to_general
                    }
                    if (direct_to === "screenshot") {
                        this.attachScreenshot()
                    } else if (direct_to === "video") {
                        this.startScreenRecorder()
                    } else {
                        this.openForm(this.form_type)
                    }
                },
                openForm: function(form_type) {
                    this.form_type = form_type;
                    this.setDialogForm();
                    this.custom_ui.events.find('.gigatester-controls-step[data-step="1"]').hide();
                    this.custom_ui.events.find('.gigatester-controls-step[data-step="2"]').show();
                    if(GigaTester_modal.configs.rating_limit > 4){
                        this.custom_ui.events.find(".gigatester-controls-form").show();
                        this.focusControls();
                    }
                    this.focusControls();
                    this.controls_step = 2
                },
                attachScreenshot: function(e) {
                    console.log(e, 'screenshot')
                    console.log($(e.currentTarget).attr("disabled"))
                    console.log(this.screenshot_data_uri.length)
                    console.log(this.screenshot_limit)
                    if (typeof e !== "undefined" && $(e.currentTarget).attr("disabled")) {
                        console.log('non screenshot')
                        return
                    }
                    else {
                        console.log('overlay screenhsot')
                    }
                },
                overlayImage: function(){
                    this.recordImage();
                },
                recordImage: async function(e){
                    GigaTester_modal.saveCheckedCategory();
                    GigaTester_modal.set_screen_default_category = false;
                    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
                        console.log("This browser does not support the API yet");
                        callback();
                    } else {
                        GigaTester_modal.hideControls();
                        navigator.mediaDevices.getDisplayMedia({
                            audio: false,
                            video: true,
                            preferCurrentTab: true,
                            oneway: true,
                            displaySurface: ['application', 'browser', 'monitor', 'window'],
                        }).then(function(stream){
                            GigaTester_modal.Draw_Tools.image_capture = 'true';
                            GigaTester_modal.Draw_Tools.removeTools()
                            stream.onended = () => {
                                console.info("GigaTester: Recording has ended");
                            };

                            stream.onerror = () => {
                                console.log('GigaTester: Error occuring during stream');
                            }
                            const recorder = new MediaRecorder(stream);
                            const chunks = [];
                            recorder.ondataavailable = e => {
                                chunks.push(e.data);
                                console.log('GigaTester: image recorder state ',recorder.state)
                            }
                            if(stream){
                                recorder.start();
                                const videoTracks = stream.getVideoTracks();
                                if (videoTracks && videoTracks[0]) {
                                    const track = videoTracks[0];
                                    track.addEventListener('ended', () => console.log('screensharing has ended'))
                                    // Wrapping in a try catch to preform most optimal solution first
                                    // before attempting less optimal solution
                                    try {
                                        const imageCapture = new ImageCapture(track);
                                        setTimeout(() => { imageCapture.grabFrame()
                                            .then((screenshot) => {
                                                GigaTester_modal.screenshotVideo(screenshot);
                                            })
                                            .catch((error) => console.error(error));
                                        },200);
                                    } catch(error) {
                                        console.warn('ImageCapture not supported on this browser');
                                        recorder.onstop = e => {
                                            GigaTester_modal.custom_ui.element.attr("drawing", "false");
                                            const completeBlob = new Blob(chunks, { type: "video/mp4" });
                                            const src = URL.createObjectURL(completeBlob);
                                            GigaTester_modal.Draw_Tools.image_capture = 'false';
                                            console.log('GigaTester: Image blob url',src);
                                            const image_overlay = $('<gtdiv id="gigatester_video_player"><gtdiv></gtdiv></gtdiv>');
                                            const video = $('<video width="0" height="0" id="gigatester_image_preview_player" preload="auto" src="' + src + '"></video>');
                                            const video_close = $('<btn id="gigatester_video_player_close">').html(Svg_Icons.close);
                                            video_close.appendTo(image_overlay);
                                            video.insertAfter($(document.getElementsByClassName('gigatester-controls-attach-actions')));
                                            setTimeout(()=> (GigaTester_modal.screenshotVideo(video.get(0))), 700);
                                        };
                                    }
                                } else {
                                    // TODO: add logic for if failure to capture video
                                }
                                setTimeout(()=> {
                                    recorder.stop(),
                                    stream.getTracks().forEach(track => track.stop());  // Stop all tracks from the MediaStream
                                }, 700);
                            }
                            console.log('GigaTester: image recording started')
                        })
                        .catch(function(err) {
                            console.log(err , 'err')
                            GigaTester_modal.set_screen_default_category = true;
                            GigaTester_modal.showControls();
                            GigaTester_modal.setDialogForm();
                            if(GigaTester_modal.form_data.rating){
                                GigaTester_modal.selectedRating();
                            }
                            /* handle the error */
                        })
                    }

                },
                screenshotVideo: function(video){
                    const canvas = document.createElement("canvas");
                    const context = canvas.getContext("2d");
                    canvas.width= window.innerWidth;
                    canvas.height = window.innerHeight;
                    if(video && context){
                        context.drawImage(video, 0, 0, window.innerWidth, window.innerHeight);
                        const frame = canvas.toDataURL("image/jpeg");
                        const image_overlay = $('<gtdiv id="gigatester_image_overlay"></gtdiv>')
                        const image =  $('<image id="gigatester_image_preview" preload="auto" src="' + frame + '"></image>');
                        image.appendTo(image_overlay)
                        image_overlay.appendTo(document.body)
                        this.addCanvas();
                        GigaTester_modal.disableScroll();
                        console.log('GigaTester: Img base64 value', frame);
                    }
                },
                finalScreenshot: async function(){
                    GigaTester_modal.setNotifyStatus("Taking screenshot...");
                    const annoted = document.getElementById('gigatester_image_overlay')
                    html2canvas(annoted , {
                        useCORS: true,
                        allowTaint : true,
                        width: window.screen.availWidth,
                        height: window.screen.availHeight,
                        // width: window.innerWidth,
                        // height: window.innerHeight,
                        windowWidth: document.getElementsByClassName('gigatester-overlay').scrollWidth,
                        windowHeight: document.getElementsByClassName('gigatester-overlay').scrollHeight,
                        // x:0,
                        // y:window.pageYOffset
                    } ).then(function(canvas) {

                    if(canvas){
                    const croppedCanvas = document.createElement('canvas')
                    const croppedCanvasContext = croppedCanvas.getContext('2d')
                    console.log(canvas, '2d');
                    console.log(window.innerHeight, 'inHeight');
                    console.log(window.innerWidth, 'inwidth');
                    // init data
                    const cropPositionTop = 0
                    const cropPositionLeft = 0
                    const cropWidth = window.innerWidth
                    const cropHeight = window.innerHeight
                    croppedCanvas.width = cropWidth
                    croppedCanvas.height = cropHeight
                    if(croppedCanvasContext){
                    croppedCanvasContext.drawImage(
                        canvas,
                        cropPositionLeft,
                        cropPositionTop,
                    )
                    }
                    const image = new Image();
                    const base64Image = canvas.toDataURL();
                    image.onload = () => {
                        GigaTester_modal.removeOverlay();
                        GigaTester_modal.hideComments();
                        GigaTester_modal.Draw_Tools.removeTools()

                        GigaTester_modal.showControls();
                        GigaTester_modal.recording = true;
                        GigaTester_modal.form_data.categories = GigaTester_modal.form_data.categories;
                        GigaTester_modal.form_data.rating =  GigaTester_modal.form_data.rating;
                        GigaTester_modal.setDialogForm();
                        GigaTester_modal.set_screen_default_category = true;
                        if(GigaTester_modal.form_data.rating){
                            GigaTester_modal.selectedRating();
                        }
                        GigaTester_modal.clearNotifyStatus();
                        const image_overlay = $('<gtdiv id="gigatester_images_player"><gtdiv></gtdiv></gtdiv>');
                        const image = $('<image id="gigatester_images_preview_player" width=300 height=160 src="' + base64Image + '"></image>');
                        const image_close = $('<button id="gigatester_images_player_close">').html(Svg_Icons.trash);
                        image.insertBefore($(document.getElementsByClassName('gigatester-controls-send gigatester-button-input')));
                        image_close.insertAfter(image);
                        GigaTester_modal.loadImage(base64Image);
                        image_close.on("click", function() {
                            image.remove();
                            GigaTester_modal.removeComments();
                            GigaTester_modal.image_file = '';
                            GigaTester_modal.set_screen_default_category = false;
                            GigaTester_modal.recording = false;
                            GigaTester_modal.saveCheckedCategory();
                            image_close.remove();
                            GigaTester_modal.setDialogForm();
                            GigaTester_modal.saveSubCategory();
                            if(GigaTester_modal.form_data.rating){
                                GigaTester_modal.selectedRating();
                            }
                        })
                        console.log(base64Image, 'final screenshot');
                    };
                    image.src = base64Image;
                }});
                },
                 getTimerText: function() {
                    console.log(GigaTester_modal.configs.audio_time)
                    let min = Math.floor(GigaTester_modal.configs.audio_time / 60);
                    let sec = GigaTester_modal.configs.audio_time - min * 60;
                    if (min < 10) {
                        min = "0" + min
                    }
                    if (sec < 10) {
                        sec = "0" + sec
                    }
                    return min + ":" + sec
                },
                startTimer: function() {
                    let timer_button = $(document.getElementById('gigatester-audio-timer-btn'))
                    console.log(timer_button.text())
                    this.timer_timeout = setInterval(function() {
                        let timer_text = this.getTimerText();
                        timer_button.text(timer_text);
                        GigaTester_modal.configs.audio_time--;
                        if (timer_text === "00:00") {
                            clearInterval(this.timer_timeout);
                            $(document.getElementById('gigatester_audio_record_player_close')).trigger('click')
                        }
                    }.bind(this), 1e3)
                },
                stopTimer: function() {
                    clearInterval(this.timer_timeout)
                },
                stopCountDown: function() {
                    clearTimeout(this.count_down_timeout)
                },
                resetTimer: function() {
                    GigaTester_modal.configs.audio_time = GigaTester_modal.configs.config_data[0].videoAudioMaxDuration * 60 || 180;
                },
                recordAudio: async function(e){
                    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
                        console.log("This browser does not support the API yet");
                      }
                    else{
                        navigator.mediaDevices.getUserMedia({
                            audio: true,
                            video: false
                        }).then(function(stream){
                        GigaTester_modal.recording = true;
                        GigaTester_modal.set_screen_default_category = false;
                        let audio_record_overlay = $('<div id="gigatester_audio_record_player"></div>');
                        let audio_record_text = $('<gtdiv id="gigatester_audio_record_player_text"></gtdiv>').html('Please click on Mic icon to stop audio recording.')
                        let timer_button = $("<btn id='gigatester-audio-timer-btn'>").addClass("gigatester-video-controls-timer").text(GigaTester_modal.getTimerText());
                        let audio_record_close = $('<btn id="gigatester_audio_record_player_close">').html(Svg_Icons.mic);
                        audio_record_close.appendTo(audio_record_overlay);
                        timer_button.appendTo(audio_record_close);
                        audio_record_text.appendTo(audio_record_overlay)
                        audio_record_overlay.appendTo($(document.body));
                        let mic_volume = $("<gtvideotoolbar id='gigatester-audio-volume-control'> <gtvolume class='hasvolume'>" + "<gtdiv></gtdiv>" + "<gtdiv></gtdiv>" + "<gtdiv></gtdiv>" + "</gtvolume> </gtvideotoolbar>").appendTo(audio_record_close);
                        const recorder = new MediaRecorder(stream);
                        GigaTester_modal.startTimer();
                        const chunks = [];
                        console.log('recording')
                        recorder.ondataavailable = e => chunks.push(e.data);
                        recorder.start();
                        audio_record_close.on('click',function () {
                        recorder.stop()
                        stream.getTracks() // get all tracks from the MediaStream
                        .forEach( track => track.stop());
                        console.log('audio stopped')})
                        recorder.onstop = e => {
                            GigaTester_modal.stopTimer();
                            GigaTester_modal.stopCountDown();
                            GigaTester_modal.resetTimer();
                            $(audio_record_overlay).remove();
                            GigaTester_modal.form_data.rating =  GigaTester_modal.form_data.rating;
                            GigaTester_modal.form_data.comment_field =  GigaTester_modal.form_data.comment_field
                            GigaTester_modal.form_data.category = GigaTester_modal.form_data.category
                            GigaTester_modal.saveCheckedCategory();
                            GigaTester_modal.setDialogForm();
                            GigaTester_modal.saveSubCategory();
                            if(GigaTester_modal.form_data.rating){
                                GigaTester_modal.selectedRating();
                            }
                            GigaTester_modal.set_screen_default_category = true;
                            const completeBlob = new Blob(chunks, { type: "audio/wav" });
                            let src = URL.createObjectURL(completeBlob);
                            console.log(src, 'audio blob')
                            let audio_overlay = $('<div id="gigatester_audio_player"><div></div></div>');
                            let audio = $('<audio id="gigatester_audio_preview_player" controls loop autoplay preload="auto" src="' + src + '"></audio>');
                            let audio_close = $('<button id="gigatester_audio_player_close">').html(Svg_Icons.trash);
                            audio.insertBefore($(document.getElementsByClassName('gigatester-controls-send gigatester-button-input')));
                            audio_close.insertAfter(audio);
                            GigaTester_modal.loadAudio(src);
                            audio_close.on("click", function() {
                                audio.remove();
                                GigaTester_modal.audio_file = '';
                                GigaTester_modal.recording = false;
                                GigaTester_modal.set_screen_default_category = false;
                                GigaTester_modal.saveCheckedCategory();
                                audio_close.remove();
                                GigaTester_modal.setDialogForm();
                                GigaTester_modal.saveSubCategory();
                                if(GigaTester_modal.form_data.rating){
                                    GigaTester_modal.selectedRating();
                                }
                            })
                          };
                        })
                        .catch(function(err){
                            console.log(err , 'audio err')
                        })

                    }
                },
                UUIDv4: function() {
                        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                            let r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                            return v.toString(16);
                        });
                },
                loadAudio: async function(src) {
                    GigaTester_modal.audio_file = await fetch(src)
                    .then(r => r.blob()).then(blobFile => new File([blobFile], 'gt_audio_' + GigaTester_modal.UUIDv4() +'.wav', { type: 'audio/wav' }));
                    console.log(GigaTester_modal.audio_file, 'audio file loaded');
                },
                loadImage: async function(src) {
                    GigaTester_modal.image_file = await fetch(src)
                    .then(r => r.blob()).then(blobFile => new File([blobFile], 'gt_image_' + GigaTester_modal.UUIDv4() +'.jpeg', { type: 'image/jpeg' }));
                    console.log(GigaTester_modal.image_file, 'image file loaded');
                },
                handleVideoError: function(e) {
                    if (typeof e.name !== "undefined" && e.name === "NotAllowedError") {
                        this.stopCapture()
                    } else {
                        GigaTester_modal.modalConfirm('<div style="margin-bottom: 8px;"><b>Video recording is not supported in your browser</b></div><div class="gigatester-modal-info-text">Please download the latest version of <a href="https://www.google.com/chrome/">Chrome</a>, <a href="https://www.mozilla.org/firefox/download/thanks/">Firefox</a> or <a href="http://microsoft.com/en-us/edge">Microsoft Edge</a>.</div>', function() {
                            GigaTester_modal.modalClose()
                        }, "OK")
                    }
                },
                submitVideoCapture: function(video_blob) {
                    GigaTester_modal.video_blob = video_blob;
                    let src = window.URL.createObjectURL(video_blob);
                    GigaTester_modal.controls_step = 2;
                    GigaTester_modal.showControls(true);
                    setTimeout( function() {
                        GigaTester_modal.recording = true;
                        GigaTester_modal.form_data.rating =  GigaTester_modal.form_data.rating;
                        GigaTester_modal.setDialogForm();
                        GigaTester_modal.saveSubCategory();
                        if(GigaTester_modal.form_data.rating){
                            GigaTester_modal.selectedRating();
                        }
                        let video_overlay = $('<div id="gigatester_video_player"><div></div></div>');
                        let video = $('<video id="gigatester_video_preview_player" controls loop autoplay preload="auto" src="' + src + '"></video>');
                        let video_close = $('<button id="gigatester_video_player_close">').html(Svg_Icons.trash);
                        video.insertBefore($(document.getElementsByClassName('gigatester-controls-send gigatester-button-input')));
                        video_close.insertAfter(video);
                        video_close.on("click", function() {
                            video_overlay.remove()
                            video.remove();
                            GigaTester_modal.video_file = '';
                            GigaTester_modal.recording = false;
                            GigaTester_modal.saveCheckedCategory();
                            video_close.remove();
                            GigaTester_modal.setDialogForm();
                            GigaTester_modal.saveSubCategory();
                            if(GigaTester_modal.form_data.rating){
                                GigaTester_modal.selectedRating();
                            }
                            })
                        }, 100);
                        GigaTester_modal.showControls();
                        GigaTester_modal.loadVideo(src);
            },
                
                startScreenRecorder: function(e) {
                    if (typeof e !== "undefined" && $(e.currentTarget).attr("disabled")) {
                        return
                    }
                    GigaTester_modal.saveCheckedCategory();
                    this.hideControls();
                    console.log('video recorder started')
                    Screen_Recorder.start({
                        onSubmit: GigaTester_modal.submitVideoCapture,
                        onCancel: this.Draw_Tools.cancelVideoCapture.bind(this.Draw_Tools),
                        timer: this.configs.screen_record_time
                    })
                },
                loadVideo: async function(src) {
                    GigaTester_modal.video_file = await fetch(src)
                    .then(r => r.blob()).then(blobFile => new File([blobFile], 'gt_video_' + GigaTester_modal.UUIDv4() +'.mp4', { type: 'video/mp4' }));
                    console.log(GigaTester_modal.video_file, 'video file loaded');
                },
                toggleAttachButtons: function() {
                    this.custom_ui.events.find(".gigatester-controls-attach-actions").toggle(this.custom_ui.events.find(".gigatester-controls-attach-actions btn[disabled]").length !== this.custom_ui.events.find(".gigatester-controls-attach-actions btn").length)
                },
                popOutDialog: function(){
                    if(GigaTester_modal.click_counter < 1){
                    let popup_dialog = $('<gtdiv class="gigatester-popout-dialog">Do u like to share your feedback?</gtdiv>')
                    popup_dialog.appendTo($(document.getElementsByClassName("gigatester-button-e")));
                    let popup_dialog_close = $('<btn id="gigatester-popout-dialog-close">').html(Svg_Icons.close);
                    popup_dialog_close.appendTo(popup_dialog);
                    popup_dialog.on("click", function(e) {
                        popup_dialog.remove();
                    })
                    popup_dialog_close.on("click", function(e) {
                        popup_dialog.remove();
                        e.stopPropagation();
                        e.preventDefault();
                    })
                }
                },
                hideControls: function() {
                    this.custom_ui.button.hide();
                    this.custom_ui.events.hide();
                    this.custom_ui.element.removeAttr("isopen")
                },
                showControls: function(force_show_form) {
                    if (!this.isAutoHide()) {
                        this.custom_ui.button.show()
                    }
                    if (this.controls_step === 2) {
                        this.setDialogForm();
                        this.custom_ui.events.find('.gigatester-controls-step[data-step="1"]').hide();
                        this.custom_ui.events.find('.gigatester-controls-step[data-step="2"]').show();
                        if (force_show_form) {
                            this.custom_ui.events.find(".gigatester-controls-form").show()
                        }
                    }
                    this.custom_ui.events.show();
                    this.focusControls();
                    this.custom_ui.element.attr("isopen", "true")
                },
                openControls: function(e) {
                    this.addControls();
                    GigaTester_modal.click_counter++;
                    if($(document.getElementsByClassName("gigatester-popout-dialog"))){
                        $(document.getElementsByClassName("gigatester-popout-dialog")).remove();
                    }
                    let open_tool = false;
                    this.controls_step = 1;
                    if (!this.configs.display_feedback) {
                        if (this.configs.workflow_type === "capture" || this.configs.workflow_type === "video" || this.configs.workflow_type === "FEEDBACK" && this.configs.direct_to_general !== "form" || this.configs.workflow_type === "BUGS" && this.configs.direct_to_bug !== "form" || this.configs.workflow_type === "FEATURE" && this.configs.direct_to_feature_request !== "form") {
                            this.controls_step = 0
                        } else if (this.configs.workflow_type === "FEEDBACK" || this.configs.workflow_type === "BUGS" || this.configs.workflow_type === "FEATURE") {
                            this.controls_step = 2
                        }
                        if (this.configs.workflow_type === "capture" || this.configs.workflow_type === "FEEDBACK" && this.configs.direct_to_general === "screenshot" || this.configs.workflow_type === "BUGS" && this.configs.direct_to_bug === "screenshot" || this.configs.workflow_type === "FEATURE" && this.configs.direct_to_feature_request === "screenshot") {
                            if (this.configs.workflow_type === "capture") {
                                this.form_type = "FEEDBACK"
                            } else {
                                this.form_type = this.configs.workflow_type
                            }
                            this.hideControls();
                            this.addCanvas();
                            open_tool = true
                        } else if (this.configs.workflow_type === "video" || this.configs.workflow_type === "FEEDBACK" && this.configs.direct_to_general === "video" || this.configs.workflow_type === "BUGS" && this.configs.direct_to_bug === "video" || this.configs.workflow_type === "FEATURE" && this.configs.direct_to_feature_request === "video") {
                            if (this.configs.workflow_type === "capture") {
                                this.form_type = "FEEDBACK"
                            } else {
                                this.form_type = this.configs.workflow_type
                            }
                            this.startScreenRecorder();
                            open_tool = true
                        }
                    }
                    if (!open_tool) {
                        this.custom_ui.element.attr("isopen", "true")
                    }
                    let page_jquery = window.$ || window.jQuery;
                    if (page_jquery && page_jquery() && page_jquery().off) {
                        page_jquery(document).off("focusin.bs.modal")
                    }
                },
                focusControls: function(e) {
                    this.custom_ui.events.find('input[type="text"],input[type="email"],textarea').filter(":visible").each(function() {
                        if ($(this).val() === "") {
                            $(this).focus();
                            return false
                        }
                    })
                },
                changeCategory: function(e) {
                    this.categories = this.custom_ui.events.find('select[name="category"]').val()
                },
                changeSeverity: function(e) {
                    this.severity = this.custom_ui.events.find('select[name="severity"]').val()
                },
                checkboxToggle: function(e) {
                    if ($(e.currentTarget).attr("disabled")) {
                        return
                    }
                    let is_checked = this.custom_ui.events.find('.gigatester-checkbox-container input[type="checkbox"]').prop("checked");
                    if (is_checked) {
                        this.custom_ui.events.find('.gigatester-checkbox-container input[type="checkbox"]').prop("checked", false);
                        this.custom_ui.events.find(".gigatester-checkbox-container svg").hide()
                    } else {
                        this.custom_ui.events.find('.gigatester-checkbox-container input[type="checkbox"]').prop("checked", true);
                        this.custom_ui.events.find(".gigatester-checkbox-container svg").show()
                    }
                },
                selectAttachment: function(e) {
                    if ($(e.currentTarget).attr("disabled")) {
                        return
                    }
                    this.custom_ui.events.find(".gigatester-controls-attachment").click()
                },
                selectedRating: function(){
                    let form_settings = this.getFormSettings(this.form_type);
                    let rating = this.form_data.rating || 0;
                    console.log('ratings', rating)
                    if (form_settings.rating_type) {
                        let selected_icon = this.custom_ui.events.find("gtrating > gtdiv:not(.inactive):last");
                        for(let i=0; i<rating; i++){
                        this.custom_ui.events.find("gtrating > gtdiv:not(.active):first").removeClass("inactive").addClass("active")
                        }
                        if (selected_icon.length) {
                            rating = selected_icon.data("rating")
                            console.log(rating)
                        }
                        this.form_data.rating = rating.slice(rating.length -1, rating.length)
                        console.log(GigaTester_modal.configs.rating_limit, 'form data')
                    }
                    if(this.form_data.rating <= GigaTester_modal.configs.rating_limit){
                    this.custom_ui.events.find(".gigatester-controls-form").show();
                    this.custom_ui.events.off("click", "gtrating > gtdiv");
                    this.custom_ui.events.off("mouseenter", "gtrating > gtdiv");
                    this.custom_ui.events.off("mouseleave", "gtrating > gtdiv");
                    this.focusControls()
                    }
                },
                selectRating: function(e) {
                    let form_settings = this.getFormSettings(this.form_type);
                    this.custom_ui.events.find("gtrating > gtdiv").addClass("inactive");
                    if (form_settings.rating_type === "EMOJI" || form_settings.rating_type === "THUMB") {
                        $(e.currentTarget).removeClass("inactive")
                    } else if (form_settings.rating_type === "STAR" || form_settings.rating_type === "HEART") {
                        $(e.currentTarget).prevAll().removeClass("inactive");
                        $(e.currentTarget).removeClass("inactive")
                    }
                    let rating = this.form_data.rating || "";

                    if (form_settings.rating_type) {
                        let selected_icon = this.custom_ui.events.find("gtrating > gtdiv:not(.inactive):last");
                        if (selected_icon.length) {
                            rating = selected_icon.data("rating")
                            console.log('GigaTester: ratings type ', rating)
                        }
                        this.form_data.rating = rating.slice(rating.length -1, rating.length)
                        // console.log(this.form_data.rating, 'form data')
                        console.log('GigaTester : max commented rating limit', GigaTester_modal.configs.rating_limit)
                    }
                    if(this.form_data.rating <= GigaTester_modal.configs.rating_limit){
                    this.custom_ui.events.find(".gigatester-controls-form").show();
                    this.custom_ui.events.off("click", "gtrating > gtdiv");
                    this.custom_ui.events.off("mouseenter", "gtrating > gtdiv");
                    this.custom_ui.events.off("mouseleave", "gtrating > gtdiv");
                    this.focusControls()
                    }
                    else{
                        this.post();
                    }
                },
                previewRating: function(e) {
                    let form_settings = this.getFormSettings(this.form_type);
                    if (form_settings.rating_type === "STAR" || form_settings.rating_type === "HEART") {
                        this.custom_ui.events.find("gtrating > gtdiv").removeClass("highlight").addClass("preview");
                        $(e.currentTarget).prevAll().addClass("highlight");
                        $(e.currentTarget).addClass("highlight")
                    } else if (form_settings.rating_type === "EMOJI" || form_settings.rating_type === "THUMB") {
                        this.custom_ui.events.find("gtrating > gtdiv").removeClass("highlight").addClass("preview");
                        $(e.currentTarget).addClass("highlight")
                    }
                },
                unPreviewRating: function(e) {
                    this.custom_ui.events.find("gtrating > gtdiv").removeClass("highlight preview")
                },
                uploadAttachment: function(e) {
                    console.log(e.target, 'file upload')
                    if (!e.target.files || !e.target.files.length) {
                        return
                    }
                    GigaTester_modal.external_file = e.target.files[0];
                    let external_file_overlay = $('<div id="gigatester_external_file_loader"><div></div></div>');
                    let external_file = $('<div id="gigatester_external_file_preview">' + GigaTester_modal.external_file.name + '</div>').html(GigaTester_modal.external_file.fileName);
                    let external_file_close = $('<button id="gigatester_external_file_close">').html(Svg_Icons.trash);
                    const size_limit = GigaTester_modal.configs.attachment_size || 1;
                    external_file.insertBefore($(document.getElementsByClassName('gigatester-controls-send gigatester-button-input')));
                    external_file_close.insertAfter(external_file);
                    external_file_close.on("click", function() {
                        external_file.remove();
                        GigaTester_modal.external_file = '';
                        GigaTester_modal.recording = false;
                        GigaTester_modal.saveCheckedCategory();
                        external_file_close.remove();
                        GigaTester_modal.setDialogForm();
                        GigaTester_modal.saveSubCategory();
                        if(GigaTester_modal.form_data.rating){
                            GigaTester_modal.selectedRating();
                        }
                        })
                        const filesize = Math.round((GigaTester_modal.external_file.size / 1024));
                        console.log(filesize + 'KB')
                        if (GigaTester_modal.external_file.size > size_limit * 1024 * 1024) {
                            console.log(Math.ceil(GigaTester_modal.external_file.size / 1024 / 1024) + 'MB')
                            console.log( size_limit + "MB")

                        }
                        this.custom_ui.events.find(".gigatester-controls-screenshot").remove();
                        this.custom_ui.events.find(".gigatester-controls-video").remove();
                        this.custom_ui.events.find(".gigatester-controls-audio").remove();
                        this.custom_ui.events.find(".gigatester-controls-add-attachment").remove();
                        this.custom_ui.events.find(".gigatester-controls-attach-actions").remove();
                },
                closeDialog: function(e) {
                    let _doClose = function() {
                        clearTimeout(this.close_timeout);
                        this.reset();
                        this.modalClose()
                    }.bind(this);
                    if (this.unSavedChanges()) {
                        this.modalConfirm('<div class="gigatester-modal-title">' + Lang.get("want_to_leave", true) + '</div><div class="gigatester-modal-info-text">' + Lang.get("changes_not_saved", true) + "</div>", _doClose)
                    } else {
                        _doClose()
                    }
                },
                unSavedChanges: function(e) {
                    if (!this.custom_ui.events) {
                        return false
                    }
                    if ((GigaTester_modal.video_file || GigaTester_modal.image_file || GigaTester_modal.form_data.rating  || GigaTester_modal.external_file) && this.controls_step === 2) {
                        return true
                    } else {
                        return false
                    }
                },
                reset: function(e) {
                    if (e && e.type === "click") {
                        e.preventDefault()
                    }
                    if (!this.isAutoHide()) {
                        this.custom_ui.button.show()
                    }
                    this.custom_ui.element.removeAttr("isopen");
                    this.comments = [];
                    this.screenshot_data_uri = [];
                    this.video_blob = null;
                    this.video_url = "";
                    this.video_annotation = [];
                    this.audio_file = '';
                    this.video_file='';
                    this.external_file='';
                    this.image_file='';
                    this.form_data = {
                        rating: "",
                        name: "",
                        email: "",
                        title: "",
                        description: "",
                        category: "",
                        severity: "",
                        assignee: ""
                    };
                    this.recording = false;
                    this.removeOverlay();
                    this.removeControls();
                    this.removeComments();
                    GigaTester_modal.set_screen_default_category = true;
                    this.form_data['category'] = GigaTester.category || "category";
                    GigaTester_modal.configs.selected_category = []
                    this.form_data['severity'] = "severity";
                    this.controls_step = 0
                },
                postMedia: function(fileSelected){
                    console.log(fileSelected,'postMedia')
                    console.log(fileSelected.name, 'name')
                    console.log('postMedia')
                    let formUpload = new FormData();
                    formUpload.append('file', fileSelected);
                    formUpload.append('fileName', fileSelected.name);
                    const reader = new FileReader();
                    console.log(formUpload.entries(),'formuplod')
                    reader.onloadend = () => {
                        console.log('inside reader')
                        const base64String = String(reader.result).split('base64,')[1];
                        const dataInfo = {
                            fileType: fileSelected.type,
                            fileName: fileSelected.name,
                        };
                        this.postMediaContent(dataInfo, fileSelected);
                    }
                    reader.readAsDataURL(fileSelected);
                },
                validateFields: function(e){
                    e.preventDefault();
                    console.log(GigaTester_modal.form_type)
                    // console.log(this.form_data['category'], 'category')
                    if(GigaTester_modal.audio_file || GigaTester_modal.external_file || GigaTester_modal.video_file || GigaTester_modal.image_file){
                        let size_limit = GigaTester_modal.configs.max_file_size;
                        const file = GigaTester_modal.audio_file || GigaTester_modal.external_file || GigaTester_modal.video_file || GigaTester_modal.image_file;
                        const filesize = Math.round((file.size / 1024));
                        console.log('GigaTester: uploaded file size ', Math.ceil(file.size / 1024 / 1024) + 'MB')
                        if (file.size > size_limit * 1024 * 1024) {
                            // error = Lang.get("max") + ": " + size_limit + "MB"
                            console.log('GigaTester: Max upload file size ', size_limit + "MB")
                            GigaTester_modal.setNotifyStatus(`${'Media size is greater than ' + GigaTester_modal.configs.max_file_size + 'MB, Kindly delete and retry again'}`)
                            setTimeout(()=> GigaTester_modal.clearNotifyStatus(), 4000);
                        }
                        else{
                            this.submitPost(e);
                        }
                        }
                    else if(GigaTester_modal.form_type === "BUGS"){
                    if(this.form_data['category'] === 'category' || this.form_data['category'] === ''){
                        console.log('category')
                        GigaTester_modal.setNotifyStatus('Please select a category')
                        setTimeout(()=> GigaTester_modal.clearNotifyStatus(), 4000);
                    }
                    else if(this.form_data['severity'] === 'severity' || this.form_data['severity'] === ''){
                        console.log('severity')
                        GigaTester_modal.setNotifyStatus('Please select bug severity')
                        setTimeout(()=> GigaTester_modal.clearNotifyStatus(), 4000);
                    }
                    else{
                        this.submitPost(e);
                        }
                }
                 else if(GigaTester_modal.form_type === "FEEDBACK"){
                    if(this.form_data.rating < 1){
                        console.log('rating')
                        GigaTester_modal.setNotifyStatus('Please provide your rating')
                        setTimeout(()=> GigaTester_modal.clearNotifyStatus(), 4000);
                    }
                    else if(this.form_data['category'] === 'category' || this.form_data['category'] === ''){
                        console.log('category')
                        GigaTester_modal.setNotifyStatus('Please select a category')
                        setTimeout(()=> GigaTester_modal.clearNotifyStatus(), 4000);
                    }
                    else{
                        this.submitPost(e);
                        }
                    }
                },
                postMediaContent: function(dataInfo, fileSelected){
                    if($('gtdiv').hasClass('gigatester-controls-send-error')){
                        $(document.getElementsByClassName('gigatester-controls-send-error')).remove();
                    }
                    //qe1lgcnkwh.execute-api.us-east-1.amazonaws.com
                    let send_button = this.custom_ui.events.find(".gigatester-controls-send");
                    send_button.addClass("gigatester-controls-send-loading")
                    console.log(dataInfo, 'dataInfo');
                    fetch(`${GigaTester.endpoint}/feedbackMedia/`, {
                        method: 'POST',
                        body:  JSON.stringify(dataInfo),
                        headers: { 'Content-Type': 'application/json' },
                      })
                        .then(res => res.json())
                        .then(data => {
                          let xhr = new XMLHttpRequest();
                          console.log('Success:', data);
                          xhr.onreadystatechange = function() {
                            if (xhr.readyState === 4) {
                              if (xhr.status === 200) {
                                console.log("UPLOAD SUCCESSFUL");
                                $("<gtdiv>").addClass("gigatester-controls-send-error-2").text("Media uploaded successfully, Submitting GigaTester_modal Form...").insertBefore(send_button)
                                console.log('GigaTester: ', xhr.responseURL);
                                // send_button.addClass("gigatester-controls-send-loading")
                                if(xhr.responseURL.slice(56,64) === 'gt_image'){
                                // console.log(data.Key, "img");
                                GigaTester_modal.image_file = xhr.responseURL.split('?')[0];
                                console.log(xhr.responseURL.split('?')[0], 'img data')
                                GigaTester_modal.post();
                                }
                                else if(xhr.responseURL.slice(56,64) === 'gt_video'){
                                // console.log(data.Key, "vid");
                                GigaTester_modal.video_file = xhr.responseURL.split('?')[0]
                                GigaTester_modal.post();
                                }
                                else if(xhr.responseURL.slice(56,64) === 'gt_audio'){
                                // console.log(data.Key, "vid");
                                GigaTester_modal.audio_file = xhr.responseURL.split('?')[0]
                                GigaTester_modal.post();
                                }
                                else{
                                // console.log(data.Key, "file");
                                GigaTester_modal.external_file = xhr.responseURL.split('?')[0]
                                GigaTester_modal.post();
                                }
                            }
                              }
                              else {
                                console.log(xhr.status, 'GigaTester: Media post api error');
                                if (this.controls_step === 2) {
                                    send_button.removeClass("gigatester-controls-send-loading");
                                    send_button.removeClass("gigatester-controls-send-uploading");
                                    send_button.prop("disabled", false);
                                    $("<gtdiv>").addClass("gigatester-controls-send-error").text("Error, please try again.").insertBefore(send_button)
                                } else if (this.controls_step === 3) {
                                    $("<gtdiv>").addClass("gigatester-controls-send-error-2").text("GigaTester_modal submit error, please try again.").insertAfter($(".gigatester-controls-send-success"))
                                }
                              }
                          };
                          xhr.onerror = function(){
                              console.log(xhr.status)
                              if (this.controls_step === 2) {
                                send_button.removeClass("gigatester-controls-send-loading");
                                send_button.removeClass("gigatester-controls-send-uploading");
                                send_button.prop("disabled", false);
                                $("<gtdiv>").addClass("gigatester-controls-send-error").text("Error, please try again.").insertBefore(send_button)
                            } else if (this.controls_step === 3) {
                                $("<gtdiv>").addClass("gigatester-controls-send-error-2").text("GigaTester_modal submit error, please try again.").insertAfter($(".gigatester-controls-send-success"))
                            }
                          }
                          xhr.upload.addEventListener("progress", function(evt) {
                            if (evt.lengthComputable) {
                                send_button.removeClass("gigatester-controls-send-loading");
                                send_button.width(send_button.width());
                                let percent = parseInt(evt.loaded / evt.total * 100, 10);
                                console.log(percent, evt)
                                send_button.find(".gigatester-controls-send-text").text(percent + "%");
                                send_button.find(".gigatester-controls-send-progress").width(percent + "%")
                            }
                        }, false)

                          xhr.open("PUT", data);
                          xhr.send(fileSelected);
                        })
                        .catch(error => {
                            console.log(error, 'post api error');
                            if (this.controls_step === 2) {
                                send_button.removeClass("gigatester-controls-send-loading");
                                send_button.removeClass("gigatester-controls-send-uploading");
                                send_button.prop("disabled", false);
                                $("<gtdiv>").addClass("gigatester-controls-send-error").text("Error, please try again.").insertBefore(send_button)
                            } else if (this.controls_step === 3) {
                                $("<gtdiv>").addClass("gigatester-controls-send-error-2").text("GigaTester_modal submit error, please try again.").insertAfter($(".gigatester-controls-send-success"))
                            }
                        })
                },
                post: function(){
                    let finalRating = 0;
                    let feedbackType='';
                    let form_settings = this.getFormSettings(this.form_type);
                    let comments = [];
                    let standardFeedback = [];
                    $.each(this.comments, function(key, comment) {
                        comments.push(comment.getData())
                    });
                    console.log(comments, 'canvas comments')
                    let send_button = this.custom_ui.events.find(".gigatester-controls-send");
                    send_button.addClass("gigatester-controls-send-loading")
                    $(document.getElementById('gigatester-loader')).addClass("gigatester-controls-loader")
                    let completed_dialog_icon = ''
                    $('.gigatester-reason-checkboxes:checked').each(function () {
                        standardFeedback.push($(this).next("label").text());
                        console.log(standardFeedback);
                    });
                    if(parseInt(this.form_data.rating) > 0){
                        finalRating = parseInt(this.form_data.rating)
                        feedbackType = 'FEEDBACK'
                    }
                    else{
                        finalRating = 0;
                        feedbackType = 'BUG_REPORT'
                    }
                    if(this.form_data['category'] === "category"){
                        this.form_data['category'] = ''
                    }
                    if(this.form_data['severity'] === "severity"){
                        this.form_data['severity'] = ''
                    }
                    const postData = {
                        productRating: finalRating,
                        userName: this.custom_ui.events.find('input[name="email"]').val() ,
                        feedbackType: feedbackType,
                        feedbackCategory: this.form_data['category'],
                        bugPriority: this.form_data['severity'],
                        productVersion: GigaTester.productVersion,
                        platformName: platform.name,
                        platformVersion: platform.version,
                        platformOs: platform.os,
                        feedbackMedia: {
                          image: GigaTester_modal.image_file,
                          video: GigaTester_modal.video_file,
                          file: GigaTester_modal.external_file,
                          audio: GigaTester_modal.audio_file,
                        },
                          feedbackComments: { "generalComment" : this.form_data['description'], "standardFeedback" : standardFeedback , ...comments },
                          productKey: GigaTester.apiKey,
                          userDetails: GigaTester_modal.user_detail
                      }
                      console.log(postData, 'post Data')
                      fetch(`${GigaTester.endpoint}/feedback/`, {
                        method: 'POST',
                        body:  JSON.stringify(postData),
                        headers: { 'Content-Type': 'application/json' },
                      })
                        .then(res => res.json())
                        .then(data => {console.log(data)
                            let success_icon = $('<gtdiv class="gigatester-controls-send-success">').html("<style>" + ":root {" + "--widget-outro-icon: " + form_settings.completed_dialog_icon_colour + " !important;" + "}" + "</style>" + '<gtdiv data-icon="' + form_settings.completed_dialog_icon + '">' + completed_dialog_icon + "<gtspan>" + String_Validator.validate(form_settings.completed_dialog_headline) + "</gtspan>" + "<p>" + String_Validator.validate(form_settings.completed_dialog_paragraph, true) + "</p>" + "</gtdiv>" + (this.configs.display_powered_by ? "<gtfooter>" + "<span>Powered by</span>" + "<span>" + " Gigatester" + "</span>"  + "</gtfooter>" : ""));
                            this.custom_ui.events.append(success_icon);
                            this.controls_step = 3;
                            send_button.find(".gigatester-controls-send-text").text('Send feedback');
                            send_button.removeClass("gigatester-controls-send-loading");
                            this.recording = false;
                            $(document.getElementsByClassName('gigatester-controls-options')).css('display', 'none');
                            let close_icon = $(document.getElementsByClassName('gigatester-controls-close'));
                            $(document.getElementsByClassName('gigatester-controls-e')).css('width','355px');
                            setTimeout(function () {
                                console.log(close_icon);
                                $(document.getElementsByClassName('gigatester-controls-options')).css('display', 'block');
                                $(document.getElementById('gigatester-loader')).removeClass("gigatester-controls-loader")
                                close_icon.trigger("click")
                            }, 3000);
                                                   })
                        .catch(error => {
                            console.log(error, 'post api error');
                            if (this.controls_step === 2) {
                                send_button.removeClass("gigatester-controls-send-loading");
                                send_button.removeClass("gigatester-controls-send-uploading");
                                send_button.prop("disabled", false);
                                $("<gtdiv>").addClass("gigatester-controls-send-error").text("Error, please try again.").insertAfter(send_button)
                            } else if (this.controls_step === 3) {
                                $("<gtdiv>").addClass("gigatester-controls-send-error-2").text("GigaTester_modal submit error, please try again.").insertAfter($(".gigatester-controls-send-success"))
                            }
                        })
                },
                submitPost: function(e){
                    e.preventDefault();
                    console.log('submit post')
                    if(GigaTester_modal.video_file){
                        GigaTester_modal.postMedia(GigaTester_modal.video_file);
                    }
                    else if(GigaTester_modal.audio_file){
                        GigaTester_modal.postMedia(GigaTester_modal.audio_file)
                    }
                    else if(GigaTester_modal.image_file){
                        GigaTester_modal.postMedia(GigaTester_modal.image_file)
                    }
                    else if(GigaTester_modal.external_file){
                        GigaTester_modal.postMedia(GigaTester_modal.external_file)
                    }
                    else{
                        GigaTester_modal.post()
                    }
                },
                closeEmptyCanvasComment: function() {
                    if (this.comments.length && this.comments[this.comments.length - 1].isEmpty()) {
                        this.comments[this.comments.length - 1].destroy();
                        this.comments.splice(this.comments.length - 1, 1)
                    }
                },
                canvasCommentStart: function(e) {
                    let pin_x, pin_y;
                    if (e.changedTouches && e.changedTouches.length) {
                        pin_x = e.changedTouches[0].pageX;
                        pin_y = e.changedTouches[0].pageY
                    } else {
                        pin_x = e.clientX;
                        pin_y = e.clientY;
                        console.log(e.clientX);
                        console.log(e.clientY);
                        console.log(e.pageX, e.pageY);
                    }
                    if (this.comments.length && this.comments[this.comments.length - 1].isOpen()) {
                        this.comments[this.comments.length - 1].saveCanvasComments();
                        $.each(this.comments, function(index, comment) {
                            comment.hideForm()
                        });
                        this.addCanvasComment(pin_x, pin_y);
                        // console.log('add new comment')
                        GigaTester_modal.disableScroll();
                    } else {
                        $.each(this.comments, function(index, comment) {
                            comment.hideForm()
                        });
                        this.addCanvasComment(pin_x, pin_y);
                        GigaTester_modal.disableScroll();
                    }
                },
            }
        let Canvas_Comment = function(options) {
                this.is_new = true;
                this.x = options.x;
                this.y = options.y;
                this.counter = options.counter;
                this.screenshot_num = options.screenshot_num;
                this.onDelete = options.onDelete;
                this.onOpen = options.onOpen;
                this.scroll_t = options.scroll_t;
                this.scroll_l = options.scroll_l;
                this.offset_x = options.offset_x;
                this.offset_y = options.offset_y;
                var element = $("<div>").addClass("gigatester-comment");
                var canvas_comment_message = "";
                element.on("click mouseup mousedown", function(e) {
                    e.stopPropagation()
                });
                element.on("keydown keyup", function(e) {
                    e.stopPropagation()
                });
                this.setHTML = function() {
                    return '<div class="gigatester-comment-pin"><span>' + (this.counter + 1) + "</span></div>" + '<form class="gigatester-comment-form">' + '<gtcomment class="gtmousescroll" contenteditable="true" data-ph="' + Lang.get("add_your_comment_here") + '" gramm_editor="false"></gtcomment>' + '<btn class="gigatester-button-input gigatester-button-input-save">' + Lang.get("save") + "</btn>" + '<btn class="gigatester-comment-form-delete" title="' + Lang.get("delete") + '">' + Svg_Icons.trash + "</btn>" + '<btn class="gigatester-comment-form-close" title="' + Lang.get("close") + '">' + Svg_Icons.times + "</btn>" + "</form>"
                };
                this.isOpen = function() {
                    return element.find(".gigatester-comment-form").is(":visible")
                };
                this.isEmpty = function() {
                    return canvas_comment_message ? false : true
                };
                this.setCounter = function(counter) {
                    this.counter = counter;
                    element.find(".gigatester-comment-pin > span").text(counter + 1)
                };
                this.submit = function() {
                    element.find(".gigatester-button-input").click()
                }, this.show = function() {
                    element.show()
                };
                this.hide = function() {
                    element.hide()
                };
                this.showForm = function() {
                    element.find(".gigatester-comment-form").show();
                    element.find("gtcomment").html(Lib.htmlEntities(canvas_comment_message, true)).focus()
                };
                this.hideForm = function() {
                    element.find(".gigatester-comment-form-delete").show();
                    element.find(".gigatester-comment-form").hide()
                };
                this.saveComment = function(){
                    element.find(".gigatester-button-input-save").trigger('click');
                }
                this.saveCanvasComments = function() {
                    element.find(".gigatester-button-input-save").trigger('click');
                    console.log('set position')
                };
                this.setFormDirection = function() {
                    var is_mobile = GigaTester_modal.is_mobile;
                    var form_width = is_mobile ? 210 : 430;
                    var form_height = is_mobile ? 150 : 200;
                    if (is_mobile) {
                        if (this.x > $(window).width() / 2) {
                            element.find(".gigatester-comment-form").attr("xdirection", "left")
                        } else {
                            element.find(".gigatester-comment-form").attr("xdirection", "right")
                        }
                        if (this.y > 140) {
                            element.find(".gigatester-comment-form").attr("ydirection", "top")
                        } else {
                            element.find(".gigatester-comment-form").attr("ydirection", "down")
                        }
                    } else {
                        if ($(window).scrollLeft() + $(window).width() - this.x >= form_width) {
                            element.find(".gigatester-comment-form").attr("xdirection", "right")
                        } else {
                            element.find(".gigatester-comment-form").attr("xdirection", "left")
                        }
                        if ($(window).scrollTop() + $(window).height() - this.y >= form_height) {
                            element.find(".gigatester-comment-form").attr("ydirection", "down")
                        } else {
                            element.find(".gigatester-comment-form").attr("ydirection", "top")
                        }
                    }
                };
                this.add = function() {
                    element.css({
                        top: this.y,
                        left: this.x
                    });
                    element.html(this.setHTML());
                    this.setFormDirection();
                    element.find(".gigatester-comment-pin").on("click", function(e) {
                        this.showForm();
                        this.onOpen(this.counter)
                    }.bind(this));
                    element.find(".gigatester-comment-form-close").on("click", function(e) {
                        e.stopPropagation();
                        if (this.is_new) {
                            this.destroy();
                            this.onDelete(this.counter);
                            return
                        }
                        this.hideForm()
                    }.bind(this));
                    element.find(".gigatester-comment-form-delete").on("click", function(e) {
                        e.stopPropagation();
                        this.destroy();
                        this.onDelete(this.counter)
                    }.bind(this));
                    element.find("gtcomment").on("keydown", function(e) {
                        if (e.which === 13) {
                            if (e.ctrlKey || e.metaKey) {
                                element.find('button[type="submit"]').on('click')
                            }
                        }
                    });
                    element.find("gtcomment").on("keyup", function(e) {
                        if ($(this).html() === "<br>") {
                            $(this).html("")
                        }
                    });
                    element.find("gtcomment").on("paste", function(e) {
                        e.preventDefault();
                        try {
                            var text = (e.originalEvent || e).clipboardData.getData("text/plain");
                            document.execCommand("insertText", false, text)
                        } catch (e) {}
                    });
                    element.find(".gigatester-button-input-save").on("click", function(e) {
                        canvas_comment_message = element.find("gtcomment").html();
                        canvas_comment_message = canvas_comment_message.replace(/<br\/?>/gi, "\n");
                        canvas_comment_message = canvas_comment_message.replace(/(<([^>]+)>)/gi, "");
                        canvas_comment_message = canvas_comment_message.replace(/&nbsp;/gi, " ");
                        canvas_comment_message = canvas_comment_message.replace(/&lt;/gi, "<");
                        canvas_comment_message = canvas_comment_message.replace(/&gt;/gi, ">");
                        canvas_comment_message = canvas_comment_message.replace(/&amp;/gi, "&");
                        canvas_comment_message = canvas_comment_message.replace(/&quot;/gi, '"');
                        canvas_comment_message = canvas_comment_message.trim();
                        if (!canvas_comment_message) {
                            return
                        }
                        this.is_new = false;
                        this.hideForm()
                    }.bind(this));
                    element.appendTo($(document.getElementById('gigatester_image_overlay')));
                        if(element.find("gtcomment").text()){
                            console.log(element.find("gtcomment").text())
                        element.find(".gigatester-button-input-save").trigger('click');
                        }
                    element.find("gtcomment").val('').trigger('focus').val(canvas_comment_message);
                };
                this.getData = function() {
                    var screen_x = parseInt(this.x - this.scroll_l - this.offset_x, 10);
                    var screen_y = parseInt(this.y - this.scroll_t - this.offset_y, 10);
                    return {
                        screen_x: screen_x,
                        screen_y: screen_y,
                        screen_number: this.counter + 1,
                        screenshot_num: this.screenshot_num,
                        message: canvas_comment_message
                    }
                };
                this.destroy = function() {
                    element.remove();
                    element = undefined;
                    canvas_comment_message = ""
                }
            };
        let Screen_Recorder = {
                recorded_blobs: [],
                recorder: null,
                display_stream: null,
                audio_stream: null,
                combined_stream: null,
                options: {
                    onSubmit: null,
                    onCancel: null
                },
                timer_timeout: null,
                timer: 60,
                timer_total: 60,
                count_down_timeout: null,
                count_down: 0,
                is_muted: false,
                mime_type: 'video/webm; codecs="vp8, opus"',
                device_list: {
                    audioinput: [],
                    screeninput: [],
                },
                isOpen: function() {
                    return this.controls ? true : false
                },
                start: function(options) {
                    this.options.onSubmit = options.onSubmit || null;
                    this.options.onCancel = options.onCancel || null;
                    this.timer = options.timer || 180;
                    this.timer = Math.min(300, this.timer);
                    this.timer = Math.max(30, this.timer);
                    this.timer_total = this.timer;
                    console.log('started screen record')
                    this.reset();
                    this.getDevice(this.createNewControls.bind(this));
                },
                reset: function() {
                    this.recorded_blobs = [];
                    this.recorder = null;
                    this.display_stream = null;
                    this.audio_stream = null;
                    this.combined_stream = null;
                    this.is_muted = false;
                    if (this.controls) {
                        this.pause_button.html(Svg_Icons.pause)
                    }
                },
                getDevice: async function(callback) {
                    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
                        callback();
                        return
                    }
                    await navigator.mediaDevices.enumerateDevices().then(function(devices) {
                        devices.forEach(function(device) {
                            console.log(device)
                            switch (device.kind) {
                                case "audioinput":
                                    this.device_list.audioinput.push(device);
                                    break;
                                case "screeninput":
                                    this.device_list.screeninput.push(device);
                                    break;
                            }
                        }.bind(this));
                        if(this.device_list.audioinput.length || this.device_list.screeninput.length){
                            this.startVideoCapture()
                        callback();
                        }
                    }.bind(this)).catch(function(error) {})
                },
                createNewControls: function() {
                    this.screen_recorder_overlay = $("<gtdiv>").attr("id", "gigatester_video_container").appendTo($(document.body));
                    this.controls = $("<gtvideotoolbar>").appendTo($(document.body));
                    this.mute_button = $("<btn>").addClass("gigatester-video-controls-mute gigatester-video-controls-active").html("<btn-tooltip>" + "<btn-name>" + Lang.get("recording_mute", true) + "</btn-name>" + "<btn-shortcut>Shift + M</btn-shortcut>" + "</btn-tooltip>" + "<btn-tooltip-arrow></btn-tooltip-arrow>" + Svg_Icons.mic).appendTo(this.controls);
                    this.pause_button = $("<btn>").addClass("gigatester-video-controls-pause").attr("disabled", true).html("<btn-tooltip>" + "<btn-name>" + Lang.get("recording_pause", true) + "</btn-name>" + "<btn-shortcut>Shift + P</btn-shortcut>" + "</btn-tooltip>" + "<btn-tooltip-arrow></btn-tooltip-arrow>" + Svg_Icons.pause).appendTo(this.controls);
                    this.start_button = $("<btn>").addClass("gigatester-video-controls-start").html("<btn-tooltip>" + "<btn-name>" + Lang.get("start_recording", true) + "</btn-name>" + "<btn-shortcut>Shift + S</btn-shortcut>" + "</btn-tooltip>" + "<btn-tooltip-arrow></btn-tooltip-arrow>" + "<btn-record></btn-record>").appendTo(this.controls);
                    this.stop_button = $("<btn>").addClass("gigatester-video-controls-stop").html("<btn-tooltip>" + "<btn-name>" + Lang.get("recording_finish", true) + "</btn-name>" + "<btn-shortcut>Shift + S</btn-shortcut>" + "</btn-tooltip>" + "<btn-tooltip-arrow></btn-tooltip-arrow>" + "<btn-timer><btn-timer-mask></btn-timer-mask></btn-timer>" + Svg_Icons.stop).appendTo(this.controls);
                    this.timer_button = $("<btn>").addClass("gigatester-video-controls-timer").text(this.getTimerText()).appendTo(this.controls);
                    this.close_button = $("<btn>").addClass("gigatester-video-controls-close").html("<btn-tooltip>" + "<btn-name>" + Lang.get("cancel", true) + "</btn-name>" + "<btn-shortcut>Esc</btn-shortcut>" + "</btn-tooltip>" + "<btn-tooltip-arrow></btn-tooltip-arrow>" + Svg_Icons.times).appendTo(this.controls);
                    this.mic_volume = $("<gtvolume>" + "<gtdiv></gtdiv>" + "<gtdiv></gtdiv>" + "<gtdiv></gtdiv>" + "</gtvolume>").appendTo(this.mute_button);
                    if (!this.device_list.audioinput.length) {
                        this.is_muted = true;
                        this.mute_button.removeClass("gigatester-video-controls-active").attr("disabled", true)
                    }
                    this.stop_button.find("btn-timer, btn-timer-mask").css("animation-duration", this.timer + "s");
                    this.start_button.on("click", this.startVideoCapture.bind(this));
                    this.stop_button.on("click", this.stopCapture.bind(this));
                    this.close_button.on("click", this.cancelCapture.bind(this));
                    this.pause_button.on("click", this.pauseRecording.bind(this));
                    this.mute_button.on("click", this.muteVoice.bind(this));
                },
                removeControls: function() {
                    this.screen_recorder_overlay.remove();
                    this.controls.remove();
                    this.screen_recorder_overlay = null;
                    this.controls = null;
                    $("gtmouseclick").remove();
                },
                muteVoice: function() {
                    if (this.mute_button.attr("disabled")) {
                        return
                    }
                    this.is_muted = !this.is_muted;
                    if (this.is_muted) {
                        this.mute_button.removeClass("gigatester-video-controls-active");
                        this.mute_button.find("btn-name").text(Lang.get("recording_unmute", true))
                    } else {
                        this.mute_button.addClass("gigatester-video-controls-active");
                        this.mute_button.find("btn-name").text(Lang.get("recording_mute", true))
                    }
                    this.toggleAudio()
                },
                toggleAudio: function() {
                    if (!this.combined_stream) {
                        return
                    }
                    let audio_tracks = this.combined_stream.getAudioTracks();
                    if (audio_tracks.length) {
                        audio_tracks.forEach(function(audio_track) {
                            audio_track.enabled = !this.is_muted
                        }.bind(this))
                    }
                },
                startVideoCapture: function() {
                    let displayMediaOptions = {
                        video: {
                            cursor: "always"
                        },
                        audio: false,
                        preferCurrentTab:false
                    };
                    let userMediaOptions = {
                        audio: true,
                        video: false
                    };
                    try {
                        let afterGetVideoStream = function() {
                            this.display_stream.getTracks()[0].onended = function() {
                                this.stopCapture()
                            }.bind(this);
                            let count_down = this.count_down;
                            let timer = function() {
                                if (count_down === 0) {
                                    this.screen_recorder_overlay.hide();
                                    $(".gigatester-video-count-down").remove();
                                    this.startRecording()
                                } else {
                                    $("<gttimer>").addClass("gigatester-video-count-down").text(count_down).appendTo($(document.body));
                                    count_down--;
                                    this.count_down_timeout = setTimeout(timer.bind(this), 1e3)
                                }
                            };
                            timer.call(this);
                            this.stop_button.show();
                            this.timer_button.show();
                            this.start_button.hide();
                            this.close_button.hide()
                        }.bind(this);
                        let afterGetAudioStream = function() {
                            if (this.audio_stream) {
                                navigator.mediaDevices.getDisplayMedia(displayMediaOptions).then(function(stream) {
                                    this.display_stream = stream;
                                    let display_tracks = this.display_stream.getTracks();
                                    let audio_tracks = this.audio_stream.getTracks();
                                    this.combined_stream = new MediaStream(display_tracks.concat(audio_tracks));
                                    afterGetVideoStream()
                                }.bind(this)).catch(this.handleStreamCaptureError.bind(this))
                            } else {
                                navigator.mediaDevices.getDisplayMedia(displayMediaOptions).then(function(stream) {
                                    this.display_stream = stream;
                                    let display_tracks = this.display_stream.getTracks();
                                    this.combined_stream = this.display_stream;
                                    this.is_muted = true;
                                    this.mute_button.removeClass("gigatester-video-controls-active").attr("disabled", true);
                                    afterGetVideoStream()
                                }.bind(this)).catch(this.handleStreamCaptureError.bind(this))
                            }
                        }.bind(this);
                        console.log(this.device_list.audioinput.length);
                        if (this.device_list.audioinput.length >= 0) {
                            navigator.mediaDevices.getUserMedia(userMediaOptions).then(function(stream) {
                                this.audio_stream = stream;
                                afterGetAudioStream();
                            }.bind(this)).catch(function() {
                                afterGetAudioStream()
                            }.bind(this))
                        } else {
                            afterGetAudioStream()
                        }
                    } catch (e) {
                        this.handleStreamCaptureError(e)
                    }
                },
                stopCapture: function() {
                    if (this.recorder) {
                        this.submitRecording()
                    } else {
                        this.stopRecording();
                        this.removeControls();
                        this.reset();
                        if (this.options.onCancel) {
                            this.options.onCancel()
                        }
                    }
                },
                cancelCapture: function() {
                    this.stopRecording();
                    this.removeControls();
                    this.reset();
                    if (this.options.onCancel) {
                        this.options.onCancel()
                    }
                },
                handleStreamCaptureError: function(e) {
                    if (typeof e.name !== "undefined" && e.name === "NotAllowedError") {
                        this.stopCapture()
                    } else {
                        GigaTester_modal.modalConfirm('<div style="margin-bottom: 8px;"><b>Video recording is not supported in your browser</b></div><div class="gigatester-modal-info-text">Please download the latest version of <a href="https://www.google.com/chrome/">Chrome</a>, <a href="https://www.mozilla.org/firefox/download/thanks/">Firefox</a> or <a href="http://microsoft.com/en-us/edge">Microsoft Edge</a>.</div>', function() {
                            GigaTester_modal.modalClose()
                        }, "OK")
                    }
                },
                getTimerText: function() {
                    let min = Math.floor(this.timer / 60);
                    let sec = this.timer - min * 60;
                    if (min < 10) {
                        min = "0" + min
                    }
                    if (sec < 10) {
                        sec = "0" + sec
                    }
                    return min + ":" + sec
                },
                startTimer: function() {
                    this.stop_button.find("btn-timer, btn-timer-mask").css("animation-play-state", "running");
                    this.timer_timeout = setInterval(function() {
                        let timer_text = this.getTimerText();
                        this.timer_button.text(timer_text);
                        this.timer--;
                        if (timer_text === "00:00") {
                            clearInterval(this.timer_timeout);
                            this.submitRecording()
                        }
                    }.bind(this), 1e3)
                },
                stopTimer: function() {
                    clearInterval(this.timer_timeout)
                },
                stopCountDown: function() {
                    clearTimeout(this.count_down_timeout)
                },
                startRecording: function() {
                    try {
                        this.recorder = new MediaRecorder(this.combined_stream, {
                            mimeType: this.mime_type
                        })
                    } catch (e) {
                        return
                    }
                    this.toggleAudio();
                    this.recorder.addEventListener("dataavailable", this.handleDataAvailable.bind(this));
                    this.recorder.start(10);
                    this.pause_button.removeAttr("disabled");
                    // this.draw_btn.removeAttr("disabled");
                    if (this.overlay) {
                        this.overlay.attr("recording", this.recorder ? "true" : "false")
                    }
                    this.startTimer();
                    window.addEventListener("beforeunload", function(e) {
                        if (!this.recorder) {
                            return
                        }
                        e.preventDefault();
                        e.returnValue = ""
                    }.bind(this))
                },
                stopRecording: function() {
                    if (this.recorder) {
                        this.recorder.stop()
                    }
                    if (this.combined_stream) {
                        this.combined_stream.getTracks().forEach(function(track) {
                            track.stop()
                        })
                    }
                    else if(this.audio_stream){
                        this.audio_stream.getTracks().forEach(function(track) {
                            track.stop()
                        })
                    }
                    console.log('stop recording')
                    this.stopTimer();
                    this.stopCountDown()
                },
                pauseRecording: function() {
                    if (this.pause_button.attr("disabled")) {
                        return
                    }
                    if (!this.recorder) {
                        return
                    }
                    switch (this.recorder.state) {
                        case "recording":
                            this.pause_button.html("<btn-tooltip><btn-name>" + Lang.get("recording_resume", true) + "</btn-name><btn-shortcut>Shift + P</btn-shortcut></btn-tooltip><btn-tooltip-arrow></btn-tooltip-arrow>" + Svg_Icons.play);
                            this.recorder.pause();
                            this.stop_button.find("btn-timer, btn-timer-mask").css("animation-play-state", "paused");
                            this.stopTimer();
                            break;
                        case "paused":
                            this.pause_button.html("<btn-tooltip><btn-name>" + Lang.get("recording_pause", true) + "</btn-name><btn-shortcut>Shift + P</btn-shortcut></btn-tooltip><btn-tooltip-arrow></btn-tooltip-arrow>" + Svg_Icons.pause);
                            this.recorder.resume();
                            this.stop_button.find("btn-timer, btn-timer-mask").css("animation-play-state", "running");
                            this.startTimer();
                            break
                    }
                },
                submitRecording: function() {
                    this.stopRecording();
                    if (this.options.onSubmit) {
                        let video_blob = new Blob(this.recorded_blobs, {
                            type: "video/webm"
                        });
                        this.options.onSubmit(video_blob)
                    }
                    this.removeControls();
                    this.reset()
                },
                handleDataAvailable: function(e) {
                    if (e.data && e.data.size > 0) {
                        this.recorded_blobs.push(e.data)
                    }
                }
            };
        let GigaTester_Api = {
            isLoaded: function() {
                console.log('GigaTester: gigatester api call')
                fetch(`${GigaTester.endpoint}/feedbackConfig?apiKey=${GigaTester.apiKey}&version=${GigaTester.productVersion}`, {
                    method: 'GET',
                  })
                    .then(res => res.json())
                    .then(data => {
                        console.log('GigaTester: api data ', data);
                        GigaTester_modal.configs.categories = [];
                        GigaTester_modal.configs.severities = [];
                        GigaTester_modal.configs.workflow_type = "";
                        GigaTester_modal.configs.rating_limit = data[0].feedbackSettings.ratingLimit;
                        GigaTester_modal.configs.main_button_background_colour = data[0].widgetLookAndFeel.bgColor;
                        GigaTester_modal.configs.main_button_text_colour = data[0].widgetLookAndFeel.fgColor;
                        GigaTester_modal.configs.main_button_text = data[0].widgetLookAndFeel.text;
                        GigaTester_modal.form_settings_default['FEEDBACK'].rating_type= data[0].feedbackSettings.ratingIcon;
                        GigaTester_modal.form_settings_default['BUGS'].bug_title_message = data[0].bugSettings.title;
                        GigaTester_modal.form_settings_default['FEEDBACK'].rating_title_message = data[0].feedbackSettings.title;
                        GigaTester_modal.configs.title = data[0].title;
                        GigaTester_modal.configs.screen_record_time = data[0].videoAudioMaxDuration * 60;
                        GigaTester_modal.configs.audio_time = data[0].videoAudioMaxDuration * 60;
                        GigaTester_modal.configs.max_file_size = data[0].uploadFileMaxSize;
                        data[0].feedbackTypes.map(item => {
                                GigaTester_modal.configs.workflow_type += item
                                GigaTester_modal.configs.workflow_type + ','

                        })
                        if(data[0].invokeOn[0] === "AFTER_DELAY"){
                            setTimeout(() => {
                                GigaTester_modal.popOutDialog();
                            }, data[0].invokeDelay * 60 * 1000)
                        }
                        GigaTester_modal.configs.config_data = data;
                        if(GigaTester_modal.form_type === "BUGS"){
                            let category = data[0].bugSettings.categories;
                            category.map(item => {
                                console.log(item.name)
                            GigaTester_modal.configs.categories.push(item.name.trim())
                            // console.log(item.feedbacks)
                            })
                        }
                        else if(GigaTester_modal.form_type === "FEEDBACK"){
                            let category = data[0].feedbackSettings.categories;
                            category.map(item => {
                                // console.log(item.name)
                            GigaTester_modal.configs.categories.push(item.name.trim());
                            // console.log(item.feedbacks)
                            })
                        }
                        data[0].bugSettings.severities.map(item => {
                            GigaTester_modal.configs.severities.push(item);
                        })
                        GigaTester_modal.addFeedbackButton();
                        })
                        .catch(function(err) {
                            console.log(err , 'err')
                            /* handle the error */
                        })
                return true
            },
            start: function() {
                GigaTester_modal.init.call(GigaTester_modal);
                console.log('js api');
            },
            destroy: function() {
                if (GigaTester_modal.custom_ui && GigaTester_modal.custom_ui.element) {
                    GigaTester_modal.custom_ui.element.remove()
                }
                GigaTester.Event_Recorder.stop();
                GigaTester.Console_Recorder.stop();
                $("link.gigatester-css").remove();
                $("script#gigatester-sdk").remove();
                delete window.GigaTester
            },
            open: function(mode, direct_to) {
                console.log('js api open');
                console.log(mode, direct_to)
                GigaTester_modal.reset();
                GigaTester_modal.openControls();
                if (mode === "capture" || mode === "video") {
                    GigaTester_modal.form_type = "FEEDBACK"
                } else if (mode === "FEEDBACK" || mode === "form") {
                    GigaTester_modal.form_type = "FEEDBACK"
                } else if (mode === "BUGS") {
                    GigaTester_modal.form_type = "BUGS"
                } else if (mode === "FEATURE") {
                    GigaTester_modal.form_type = "FEATURE"
                }
                if (mode === "capture" || direct_to === "screenshot") {
                    GigaTester_modal.attachScreenshot();
                    GigaTester_modal.controls_step = 0
                } else if (mode === "video" || direct_to === "video") {
                    GigaTester_modal.startScreenRecorder();
                    GigaTester_modal.controls_step = 0
                } else if (mode === "FEEDBACK" || mode === "form") {
                    GigaTester_modal.openForm("FEEDBACK");
                    GigaTester_modal.controls_step = 0
                } else if (mode === "BUGS") {
                    GigaTester_modal.openForm("BUGS");
                    GigaTester_modal.controls_step = 0
                } else if (mode === "FEATURE") {
                    GigaTester_modal.openForm("FEATURE");
                    GigaTester_modal.controls_step = 0
                }
            },
            close: function() {
                GigaTester_modal.modalClose();
                GigaTester_modal.reset();
            },
            show: function() {
                    GigaTester_modal.custom_ui.element.css("display", "")
            },
            hide: function() {
                GigaTester_modal.reset();
                GigaTester_modal.custom_ui.element.hide()
            },
            setEmail: function(email) {
                if (typeof email === "string") {
                    GigaTester_modal.email = $.trim(email)
                    // GigaTester_modal.form_settings_default.BUGS.email_field_disable = true;
                    // GigaTester_modal.form_settings_default.FEEDBACK.email_field_disable = true;
                }
            },
            setUserDetails: function(userData){
                console.log(userData)
                if(typeof userData === "object"){
                console.log('gigatester userdetails ' + userData)
                Object.entries(userData).forEach(([key, val]) => {
                    if(key.trim().toLowerCase() == "email"){
                        GigaTester.setEmail(val)
                    }
                    console.log(key.trim().toLowerCase(), val);
                  });
                GigaTester_modal.user_detail = userData
                sessionStorage.setItem('gigatesterDefaultUserDetails', JSON.stringify(userData))
                }
            },
            setName: function(name) {
                if (typeof name === "string") {
                    GigaTester_modal.name = $.trim(name)
                }
            },
            setDefaultCategory: function(category, params) {
                if (typeof category === "string" && typeof params === "string") {
                    let defaultCategory = category;
                    console.log('GigaTester: defaultCategory ', defaultCategory)
                    console.log('GigaTester: defaultCategory ', params.trim())
                    let category_feedback_counter = false;
                    let category_bug_counter = false;
                    if(params.trim().toUpperCase() === "BUGS"){
                        GigaTester_modal.configs.config_data[0].bugSettings.categories.map(value => {
                            // console.log('GigaTester: bug category api value', value)
                            if(value.name.trim() === defaultCategory.trim()){
                                category_feedback_counter = true;
                                console.log('GigaTester: category selected ' + defaultCategory);
                                GigaTester_modal.configs.bugs_default_category = defaultCategory;
                                GigaTester_modal.form_data['category'] = defaultCategory;
                                sessionStorage.setItem('gigatesterDefaultBugsCategory', defaultCategory)
                            }
                        })
                        if(!category_feedback_counter){
                            GigaTester_modal.form_data['category'] = 'category';
                        }
                    }
                    else if(params.trim().toUpperCase() === "FEEDBACK"){
                        GigaTester_modal.configs.config_data[0].feedbackSettings.categories.map(value => {
                            if(value.name.trim() === defaultCategory.trim()){
                                category_bug_counter = true;
                                console.log('GigaTester: category selected ' + defaultCategory);
                                GigaTester_modal.configs.feedback_default_category = defaultCategory;
                                GigaTester_modal.form_data['category'] = defaultCategory;
                                sessionStorage.setItem('gigatesterDefaultFeedbackCategory', defaultCategory)
                            }
                        })
                        if(!category_bug_counter){
                            GigaTester_modal.form_data['category'] = 'category';
                        }
                    }
                    else{
                        console.log('GigaTester: Error at parameter string match');
                        GigaTester_modal.form_data['category'] = 'category';
                        }
                }
            },
            unSavedChanges: function() {
                return GigaTester_modal.unSavedChanges()
            },
            }
        window.GigaTester = $.extend(window.GigaTester, GigaTester_Api);
        $(document).ready($.proxy(GigaTester_modal.init, GigaTester_modal))
    })(JQ);
    }catch(err){
            console.log(err, 'err')
        }
}
}
function checkgigatester(){
if(typeof window.jQuery === "undefined" || typeof window.html2canvas === "undefined" || typeof window.platform === "undefined" ||  typeof window.Snap === "undefined"){
setTimeout(() => {
    checkgigatester();
    console.log('GigaTester: inside giga timeout function')}, 200);
}
else{
    console.log('inside giga timeout outside')
    gigatester();
}
}
checkgigatester()

if (typeof _temp_$ !== "undefined" && _temp_$) {
    window.$ = _temp_$
}
if (typeof _temp_jQuery !== "undefined" && _temp_jQuery) {
    window.jQuery = _temp_jQuery
}
})();